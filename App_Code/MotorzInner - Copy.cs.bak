using WebApplication1;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Script.Serialization;
using System.Web.Services;
using System.Web.Script.Services;
using MotorzService;
using System.Web.Hosting;
using System.IO;
using System.Text;

/// <summary>
/// Summary description for MotorzInner
/// </summary>
[WebService(Namespace = "http://tempuri.org/")]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
// To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
[System.Web.Script.Services.ScriptService]
public class MotorzInner : System.Web.Services.WebService
{
    dbConnection dbCon = new dbConnection();
    ServiceMethods ServiceMethod = new ServiceMethods();
    string ErrorMsgPrefix = "Error in MotorzInner.cs Method Name : ";
    public MotorzInner()
    {

        //Uncomment the following line if using designed components 
        //InitializeComponent(); 
    }


    [WebMethod]
    public void GetAllBrand()
    {
        var obj = new List<Objs>();
        JavaScriptSerializer js = new JavaScriptSerializer() { MaxJsonLength = Int32.MaxValue };
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            DataTable dt = dbCon.GetDataTable("Select Id,name from Vehicle_Brand  where IsDelete=0 --and id in ( select Vehicle_Brand_Id from Vehicle_Model where IsDelete=0)");
            if (dt != null && dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    var item = new Objs();
                    item.Id = dt.Rows[i]["Id"].ToString();
                    item.Name = dt.Rows[i]["Name"].ToString();
                    //Model
                    string[] strArr = { item.Id };
                    DataTable dt1 = dbCon.GetDataTableWithParams("Select Id,name from Vehicle_Model  where IsDelete=0  and Vehicle_Brand_Id=@1", strArr);
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        for (int j = 0; j < dt1.Rows.Count; j++)
                        {
                            var item1 = new Objs1();
                            item1.Id = dt1.Rows[j]["Id"].ToString();
                            item1.Name = dt1.Rows[j]["Name"].ToString();
                            //variant
                            string[] strArr2 = { item1.Id };
                            DataTable dt2 = dbCon.GetDataTableWithParams("Select Id,name from Vehicle_Variant  where IsDelete=0 and Vehicle_Model_id=@1", strArr2);
                            if (dt1 != null && dt1.Rows.Count > 0)
                            {
                                for (int k = 0; k < dt2.Rows.Count; k++)
                                {
                                    var item2 = new Objs2();
                                    item2.Id = dt2.Rows[k]["Id"].ToString();
                                    item2.Name = dt2.Rows[k]["Name"].ToString();
                                    item1.Items.Add(item2);
                                }
                            }
                            //End
                            item.Items.Add(item1);
                        }
                    }
                    //End
                    obj.Add(item);
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetAllBrand Msg:" + e.Message, "", e.StackTrace);

        }
        Context.Response.Write(js.Serialize(obj));
    }

    [WebMethod]
    public void GetModelByBrandId(string Id)
    {
        var obj = new List<Objs>();
        JavaScriptSerializer js = new JavaScriptSerializer() { MaxJsonLength = Int32.MaxValue };
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            string[] strArr = { Id };
            DataTable dt = dbCon.GetDataTableWithParams("Select Id,name from Vehicle_Model  where IsDelete=0  and Vehicle_Brand_Id=@1", strArr);
            if (dt != null && dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    var item = new Objs();
                    item.Id = dt.Rows[i]["Id"].ToString();
                    item.Name = dt.Rows[i]["Name"].ToString();
                    obj.Add(item);
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetModelByBrandId Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(obj));
    }

    [WebMethod]
    public void GetVariantByModelId(string Id)
    {
        var obj = new List<Objs>();
        JavaScriptSerializer js = new JavaScriptSerializer() { MaxJsonLength = Int32.MaxValue };
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            string[] strArr = { Id };
            DataTable dt = dbCon.GetDataTableWithParams("Select Id,name from Vehicle_Variant  where IsDelete=0 and Vehicle_Model_id=@1", strArr);
            if (dt != null && dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    var item = new Objs();
                    item.Id = dt.Rows[i]["Id"].ToString();
                    item.Name = dt.Rows[i]["Name"].ToString();
                    obj.Add(item);
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetVariantByModelId Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(obj));
    }

    [WebMethod]
    public void AddNewBrand(string Brands)
    {
        try
        {
            string strids = "0";
            string[] strArrBrand = Brands.Split(',');
            for (int i = 0; i < strArrBrand.Length; i++)
            {
                string[] strArr = { strArrBrand[i] };
                strids += "," + dbCon.ExecuteScalarQueryWithParams("INSERT INTO [dbo].[Vehicle_Brand] ([Name],[IsActive],[IsDelete],[DisplayOrder],[DOC],[DOM]) VALUES (@1,1,0,0,SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30'),SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30')) SELECT SCOPE_IDENTITY();", strArr).ToString();
            }
            var obj = new List<Objs>();
            JavaScriptSerializer js = new JavaScriptSerializer() { MaxJsonLength = Int32.MaxValue };
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            try
            {
                DataTable dt = dbCon.GetDataTable("Select Id,name from Vehicle_Brand  where IsDelete=0 and id in (" + strids + ")");
                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        var item = new Objs();
                        item.Id = dt.Rows[i]["Id"].ToString();
                        item.Name = dt.Rows[i]["Name"].ToString();
                        //Model
                        string[] strArr = { item.Id };
                        DataTable dt1 = dbCon.GetDataTableWithParams("Select Id,name from Vehicle_Model  where IsDelete=0  and Vehicle_Brand_Id=@1", strArr);
                        if (dt != null && dt.Rows.Count > 0)
                        {
                            for (int j = 0; j < dt1.Rows.Count; j++)
                            {
                                var item1 = new Objs1();
                                item1.Id = dt1.Rows[j]["Id"].ToString();
                                item1.Name = dt1.Rows[j]["Name"].ToString();
                                //variant
                                string[] strArr2 = { item1.Id };
                                DataTable dt2 = dbCon.GetDataTableWithParams("Select Id,name from Vehicle_Variant  where IsDelete=0 and Vehicle_Model_id=@1", strArr2);
                                if (dt1 != null && dt1.Rows.Count > 0)
                                {
                                    for (int k = 0; k < dt2.Rows.Count; k++)
                                    {
                                        var item2 = new Objs2();
                                        item2.Id = dt2.Rows[k]["Id"].ToString();
                                        item2.Name = dt2.Rows[k]["Name"].ToString();
                                        item1.Items.Add(item2);
                                    }
                                }
                                //End
                                item.Items.Add(item1);
                            }
                        }
                        //End
                        obj.Add(item);
                    }
                }
            }
            catch (Exception e)
            {
                dbCon.InsertLogs(ErrorMsgPrefix + " GetAllBrand Msg:" + e.Message, "", e.StackTrace);

            }
            Context.Response.Write(js.Serialize(obj));
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetModelByBrandId Msg:" + e.Message, "", e.StackTrace);
        }
    }

    [WebMethod]
    public void AddNewModel(string Models, string BrandId)
    {
        try
        {
            string strids = "0";
            string[] strArrBrand = Models.Split(',');
            for (int i = 0; i < strArrBrand.Length; i++)
            {
                string[] strArr = { strArrBrand[i], BrandId };
                strids += "," + dbCon.ExecuteScalarQueryWithParams("INSERT INTO [dbo].[Vehicle_Model] ([Name],[IsActive],[IsDelete],[DisplayOrder],[DOC],[DOM],Vehicle_Brand_Id) VALUES (@1,1,0,0,SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30'),SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30'),@2) SELECT SCOPE_IDENTITY();", strArr).ToString();
            }
            var obj = new List<Objs1>();
            JavaScriptSerializer js = new JavaScriptSerializer() { MaxJsonLength = Int32.MaxValue };
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            try
            {
                DataTable dt1 = dbCon.GetDataTable("Select Id,name from Vehicle_Model  where IsDelete=0 and id in(" + strids + ")");
                if (dt1 != null && dt1.Rows.Count > 0)
                {
                    for (int j = 0; j < dt1.Rows.Count; j++)
                    {
                        var item1 = new Objs1();
                        item1.Id = dt1.Rows[j]["Id"].ToString();
                        item1.Name = dt1.Rows[j]["Name"].ToString();
                        obj.Add(item1);
                    }
                }
            }
            catch (Exception e)
            {
                dbCon.InsertLogs(ErrorMsgPrefix + " AddNewModel Msg:" + e.Message, "", e.StackTrace);
            }
            Context.Response.Write(js.Serialize(obj));
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetModelByBrandId Msg:" + e.Message, "", e.StackTrace);
        }
    }

    [WebMethod]
    public void AddNewVariant(string Variants, string ModelId)
    {
        try
        {
            string strids = "0";
            string[] strArrBrand = Variants.Split(',');
            for (int i = 0; i < strArrBrand.Length; i++)
            {
                string[] strArr = { strArrBrand[i], ModelId };
                strids += "," + dbCon.ExecuteScalarQueryWithParams("INSERT INTO [dbo].[Vehicle_Variant] ([Name],[IsActive],[IsDelete],[DisplayOrder],[DOC],[DOM],Vehicle_Model_Id) VALUES (@1,1,0,0,SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30'),SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30'),@2) SELECT SCOPE_IDENTITY();", strArr).ToString();
            }
            var obj = new List<Objs1>();
            JavaScriptSerializer js = new JavaScriptSerializer() { MaxJsonLength = Int32.MaxValue };
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            try
            {
                DataTable dt1 = dbCon.GetDataTable("Select Id,name from Vehicle_Variant  where IsDelete=0 and id in(" + strids + ")");
                if (dt1 != null && dt1.Rows.Count > 0)
                {
                    for (int j = 0; j < dt1.Rows.Count; j++)
                    {
                        var item1 = new Objs1();
                        item1.Id = dt1.Rows[j]["Id"].ToString();
                        item1.Name = dt1.Rows[j]["Name"].ToString();
                        obj.Add(item1);
                    }
                }
            }
            catch (Exception e)
            {
                dbCon.InsertLogs(ErrorMsgPrefix + " AddNewVariant Msg:" + e.Message, "", e.StackTrace);
            }
            Context.Response.Write(js.Serialize(obj));
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetModelByBrandId Msg:" + e.Message, "", e.StackTrace);
        }
    }


    [WebMethod]
    public void GetTaxCategory()
    {
        var obj = new List<Objs>();
        JavaScriptSerializer js = new JavaScriptSerializer() { MaxJsonLength = Int32.MaxValue };
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            DataTable dt = dbCon.GetDataTable("SELECT [Id],Name+',Rate:'+Convert(varchar,TaxValue) as Name FROM [dbo].[TaxCategory] where IsDelete=0");
            if (dt != null && dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    var item = new Objs();
                    item.Id = dt.Rows[i]["Id"].ToString();
                    item.Name = dt.Rows[i]["Name"].ToString();
                    obj.Add(item);
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetModelByBrandId Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(obj));
    }

    [WebMethod]
    public void GetCategory()
    {
        var obj = new List<Objs>();
        JavaScriptSerializer js = new JavaScriptSerializer() { MaxJsonLength = Int32.MaxValue };
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            DataTable dt = dbCon.GetDataTable("SELECT ca.[Id] ,isnull((Select c.name+' >> ' from Category as c where c.Id=ca.ParentCategoryId),'')+[Name]  As Name FROM [dbo].[Category] ca");
            if (dt != null && dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    var item = new Objs();
                    item.Id = dt.Rows[i]["Id"].ToString();
                    item.Name = dt.Rows[i]["Name"].ToString();
                    obj.Add(item);
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetModelByBrandId Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(obj));
    }

    [WebMethod]
    public void SavePartDetail(string partId, string modelIds, string variantIds, string Name, string Code, string CatId, string TaxId, string Hsn, string IsGeneric)
    {
        var obj = new Objs();
        JavaScriptSerializer js = new JavaScriptSerializer() { MaxJsonLength = Int32.MaxValue };
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            if (partId == "0")
            {
                String[] StrArr = { Name, "0", Code, "1", CatId, TaxId, "0", Hsn, (IsGeneric.ToLower() == "true" ? "1" : "0") };
                // DataTable dtchk = dbCon.GetDataTableWithParams("Select [Code] from Spare where Code=@", StrArr);
                int Id = dbCon.ExecuteScalarQueryWithParams("INSERT INTO [dbo].[Spare] ([Name],[Number],[Code],[IsActive],[Category_Id],[IsDeleted],[DOC],[DOM],TaxId,price,HSNNumber,IsGeneric) OUTPUT INSERTED.ID VALUES (@1,@2,@3,@4,@5,0,getdate(),getdate(),@6,@7,@8,@9)", StrArr);
                string SpareId = Id.ToString();
                try
                {
                    dbCon.ExecuteQuery("INSERT INTO [dbo].[SpareSpareBrandMapping] ([SpareId],[BrandId],[Qty],[MinQty],[MaxQty],[IsActive],[IsDeleted],[DOC],[DOM],[HSNNumber],[Mrp],[WorkshopId]) VALUES (" + SpareId + ",34,0,1,5000,1,0,getdate(),getdate(),'',0,1)");
                }
                catch (Exception E) { }
                if (IsGeneric.ToLower().Equals("false"))
                {
                    //Mapping
                    List<string> StrLst = new List<string>();
                    StrLst = modelIds.Split(',').ToList();
                    foreach (var s in StrLst)
                    {
                        if (int.Parse(s) > 0)
                        {
                            dbCon.ExecuteQuery("INSERT INTO [dbo].[SpareModelMapping] ([SpareId] ,[VehicleModelId] , [DOC] ,[DOM] ,[IsDelete]) VALUES (" + Id + "," + s + ",getdate(),getdate(),0)");
                        }
                    }
                    //StrLst = new List<string>();
                    //StrLst = (List<string>)ViewState["SelectedBrands"];
                    //foreach (var s in StrLst)
                    //{
                    //    if (int.Parse(s) > 0)
                    //    {
                    //        dbCon.ExecuteQuery("INSERT INTO [dbo].[SpareBrandMapping] ([SpareId] ,[VehicleBrandId] , [DOC] ,[DOM] ,[IsDelete]) VALUES (" + Id + "," + s + ",getdate(),getdate(),0)");
                    //    }
                    //}
                    StrLst = new List<string>();
                    StrLst = variantIds.Split(',').ToList();
                    foreach (var s in StrLst)
                    {
                        if (int.Parse(s) > 0)
                        {
                            dbCon.ExecuteQuery("INSERT INTO [dbo].[SpareVariantMapping] ([SpareId] ,[VehicleVariantId] , [DOC] ,[DOM] ,[IsDelete]) VALUES (" + Id + "," + s + ",getdate(),getdate(),0)");
                        }
                    }
                }
                //Emd Mapping

            }
            else
            {
                string SpareId = partId;
                string Id = SpareId;
                String[] StrArr = { Name, "", Code, "1", CatId, SpareId, TaxId, "0", (IsGeneric.ToLower() == "true" ? "1" : "0") };
                dbCon.ExecuteQueryWithParams("Update [dbo].[Spare] Set [Name]=@1,[Number]=@2,[Code]=@3,[IsActive]=@4,[Category_Id]=@5,TaxId=@7,IsGeneric=@9 where id=@6 ", StrArr);

                if (IsGeneric.ToLower().Equals("false"))
                {
                    //Mapping
                    DataTable dtModel = dbCon.GetDataTable("Select * From SpareModelMapping where  SpareId=" + Id);
                    List<string> StrLst1 = new List<string>();
                    StrLst1 = modelIds.Split(',').ToList();
                    for (int i = 0; i < dtModel.Rows.Count; i++)
                    {
                        if (!StrLst1.Contains(dtModel.Rows[i]["VehicleModelId"].ToString()))
                            dbCon.ExecuteQuery("Delete from [dbo].[SpareModelMapping] where id=" + dtModel.Rows[i]["Id"].ToString());
                    }

                    //DataTable dtBrand = dbCon.GetDataTable("Select * From SpareBrandMapping where  SpareId=" + Id);
                    //List<string> StrLst2 = new List<string>();
                    //StrLst2 = (List<string>)ViewState["SelectedBrands"];
                    //for (int i = 0; i < dtBrand.Rows.Count; i++)
                    //{
                    //    if (!StrLst2.Contains(dtBrand.Rows[i]["VehicleBrandId"].ToString()))
                    //        dbCon.ExecuteQuery("Delete from [dbo].[SpareBrandMapping] where id=" + dtBrand.Rows[i]["Id"].ToString());
                    //}

                    DataTable dtVariant = dbCon.GetDataTable("Select * From SpareVariantMapping where  SpareId=" + Id);
                    List<string> StrLst3 = new List<string>();
                    StrLst3 = variantIds.Split(',').ToList();
                    for (int i = 0; i < dtVariant.Rows.Count; i++)
                    {
                        if (!StrLst3.Contains(dtVariant.Rows[i]["VehicleVariantId"].ToString()))
                            dbCon.ExecuteQuery("Delete from [dbo].[SpareVariantMapping] where id=" + dtVariant.Rows[i]["Id"].ToString());
                    }

                    //Repeated Please remove 
                    List<string> StrLst = new List<string>();
                    StrLst = modelIds.Split(',').ToList();
                    foreach (var s in StrLst)
                    {
                        if (int.Parse(s) > 0)
                        {
                            dbCon.ExecuteQuery("INSERT INTO [dbo].[SpareModelMapping] ([SpareId] ,[VehicleModelId] , [DOC] ,[DOM] ,[IsDelete]) VALUES (" + Id + "," + s + ",getdate(),getdate(),0)");
                        }
                    }
                    //StrLst = new List<string>();
                    //StrLst = (List<string>)ViewState["SelectedBrands"];
                    //foreach (var s in StrLst)
                    //{
                    //    if (int.Parse(s) > 0)
                    //    {
                    //        dbCon.ExecuteQuery("INSERT INTO [dbo].[SpareBrandMapping] ([SpareId] ,[VehicleBrandId] , [DOC] ,[DOM] ,[IsDelete]) VALUES (" + Id + "," + s + ",getdate(),getdate(),0)");
                    //    }
                    //}
                    StrLst = new List<string>();
                    StrLst = variantIds.Split(',').ToList();
                    foreach (var s in StrLst)
                    {
                        if (int.Parse(s) > 0)
                        {
                            dbCon.ExecuteQuery("INSERT INTO [dbo].[SpareVariantMapping] ([SpareId] ,[VehicleVariantId] , [DOC] ,[DOM] ,[IsDelete]) VALUES (" + Id + "," + s + ",getdate(),getdate(),0)");
                        }
                    }
                }
                //Emd Mapping

            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " SavePartDetail Msg:" + e.Message, "", e.StackTrace);
        }
        obj.Id = "1";
        Context.Response.Write(js.Serialize(obj));
    }

    [WebMethod]
    public void GetPartDetailById(string id)
    {
        var obj = new PartDetail();
        JavaScriptSerializer js = new JavaScriptSerializer() { MaxJsonLength = Int32.MaxValue };
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            string[] strArr = { id };
            DataTable dt = dbCon.GetDataTableWithParams("SELECT [Name],[Code],[Category_Id],[TaxId],HSNNumber,isnull(IsGeneric,0) as IsGeneric FROM [dbo].[Spare] where id=@1", strArr);
            if (dt != null && dt.Rows.Count > 0)
            {
                obj.name = dt.Rows[0]["Name"].ToString();
                obj.code = dt.Rows[0]["Code"].ToString();
                obj.catid = dt.Rows[0]["Category_Id"].ToString();
                obj.taxid = dt.Rows[0]["TaxId"].ToString();
                obj.hsn = dt.Rows[0]["HSNNumber"].ToString();
                obj.isgeneric = dt.Rows[0]["IsGeneric"].ToString();
            }
            dt = dbCon.GetDataTableWithParams("SELECT distinct [VehicleModelId] FROM [dbo].[SpareModelMapping] where [IsDelete]=0  and SpareId=@1", strArr);
            var strModelIds = "0";
            if (dt != null && dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    strModelIds += "," + dt.Rows[i][0].ToString();
                }
            }
            dt = dbCon.GetDataTableWithParams("SELECT distinct [VehiclevariantId] FROM [dbo].[SparevariantMapping] where [IsDelete]=0 and SpareId=@1", strArr);
            var strVariantIds = "0";
            if (dt != null && dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    strVariantIds += "," + dt.Rows[i][0].ToString();
                }
            }
            obj.modelids = strModelIds;
            obj.variantids = strVariantIds;
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetModelByBrandId Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(obj));
    }

    [WebMethod]
    public void GetAllForPurchase(string VendorId)
    {
        var objectToSerilize = new List<SpareNConsumable>();
        JavaScriptSerializer js = new JavaScriptSerializer() { MaxJsonLength = Int32.MaxValue };

        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            DataTable dt = new DataTable();
            String query = "SELECT Spare.Id,[Name]+','+[Code]  AS Spares,PurchasePrice FROM [dbo].[Spare] ";
            //if (!String.IsNullOrEmpty(VendorId))
            //{
            //    int vendorid = Convert.ToInt32(VendorId);
            //    if (vendorid > 0)
            //    {
            //        query += " inner join [Spare_Vendor_Mapping] on [Spare_Vendor_Mapping].SpareId=Spare.Id where VendorId =@1";
            //        string[] Vendorid = { vendorid.ToString() };
            //        dt = dbCon.GetDataTableWithParams(query, Vendorid);
            //    }
            //    else
            //    {
            //        dt = dbCon.GetDataTable(query);
            //    }
            //}
            //else
            //{
            //    dt = dbCon.GetDataTable(query);
            //}
            dt = dbCon.GetDataTable(query);
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    var model = new SpareNConsumable();
                    string id = dr["Id"].ToString();
                    model.Id = id;
                    model.Name = dr["Spares"].ToString();
                    model.PurchasePrice = dr["PurchasePrice"].ToString();
                    model.type = "Spare";
                    objectToSerilize.Add(model);
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetAllForPurchase Msg:" + e.Message, "", e.StackTrace);
        }
        try
        {
            DataTable dt = new DataTable();
            String query = "SELECT [Id],[Name],[PurchasePrice] FROM [dbo].[Consumables]";
            dt = dbCon.GetDataTable(query);
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    var model = new SpareNConsumable();
                    string id = dr["Id"].ToString();
                    model.Id = id;
                    model.Name = dr["Name"].ToString();
                    model.PurchasePrice = dr["PurchasePrice"].ToString();
                    model.type = "Consumable";
                    objectToSerilize.Add(model);
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetAllForPurchases Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }

    [WebMethod]
    public void GetVendors()
    {
        var objectToSerilize = new List<Objs>();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            string query = "SELECT [Id],[Name]  FROM [dbo].[Vendor] where IsDeleted=0";
            DataTable dt = dbCon.GetDataTable(query);
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    var Spares = new Objs();
                    Spares.Id = dr["Id"].ToString();
                    Spares.Name = dr["Name"].ToString();
                    objectToSerilize.Add(Spares);
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetVendors Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }

    [WebMethod]
    public void GetSpareBrand()
    {
        var objectToSerilize = new List<Objs>();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            string query = "SELECT [Id],[Name]  FROM [dbo].[Spare_Brand] where IsDelete=0";
            DataTable dt = dbCon.GetDataTable(query);
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    var Spares = new Objs();
                    Spares.Id = dr["Id"].ToString();
                    Spares.Name = dr["Name"].ToString();
                    objectToSerilize.Add(Spares);
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetSpareBrand Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }

    [WebMethod]
    public void GetConsumableBrand()
    {
        var objectToSerilize = new List<Objs>();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            string query = "SELECT [Id],[Name]  FROM [dbo].[Consumables_Brand] where IsDelete=0";
            DataTable dt = dbCon.GetDataTable(query);
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    var Spares = new Objs();
                    Spares.Id = dr["Id"].ToString();
                    Spares.Name = dr["Name"].ToString();
                    objectToSerilize.Add(Spares);
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetConsumableBrand Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }

    [WebMethod]
    public void AddGrn(string VendorId, string strSpare, string strQty, string strPri, string strType, string strMrp, string strBMrp, string strbrand, string inv, string recby, string rmk, string strDis, string strDt, string dcn)
    {
        var objectToSerilize = new Objs();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            DateTime date = DateTime.ParseExact(strDt, "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture);
            string[] strArr = { };
            int grnid = dbCon.ExecuteScalarQueryWithParams("INSERT INTO [dbo].[GRN]([DOC],[DOM],[ReceivedBy],[VendorId],[RefNumber],[Remark],[InvoiceNo],DeliveryDate,dcno) VALUES('" + dbCon.getindiantime() + "','" + dbCon.getindiantime() + "','" + recby + "','" + VendorId + "',0,'" + rmk + "','" + inv + "','" + date + "','" + dcn + "') SELECT SCOPE_IDENTITY();", strArr);
            string[] strArrSpare = strSpare.Split(new string[] { "$#@" }, StringSplitOptions.None);
            string[] strArrQty = strQty.Split(new string[] { "$#@" }, StringSplitOptions.None);
            string[] strArrPri = strPri.Split(new string[] { "$#@" }, StringSplitOptions.None);
            string[] strArrMrp = strMrp.Split(new string[] { "$#@" }, StringSplitOptions.None);
            string[] strArrBMrp = strBMrp.Split(new string[] { "$#@" }, StringSplitOptions.None);
            string[] strArrBrand = strbrand.Split(new string[] { "$#@" }, StringSplitOptions.None);
            string[] strArrDis = strDis.Split(new string[] { "$#@" }, StringSplitOptions.None);
            string[] strArrtype = strType.Split(new string[] { "$#@" }, StringSplitOptions.None);

            for (int i = 0; i < strArrSpare.Length; i++)
            {
                int grnDid = dbCon.ExecuteScalarQueryWithParams("INSERT INTO [dbo].[GRNDetail] (GRNId,[EntityId] , [EntityType] ,[Qty]  ,[Price],[Discount],[BrandId],[DOC]) VALUES ('" + grnid + "','" + strArrSpare[i] + "' , '" + strArrtype[i] + "' ,'" + strArrQty[i] + "','" + strArrPri[i] + "','" + strArrDis[i] + "','" + strArrBrand[i] + "','" + dbCon.getindiantime() + "') SELECT SCOPE_IDENTITY();", strArr);
                if (strArrtype[i] == "Consumable")
                {

                    DataTable dt = dbCon.GetDataTable("SELECT id,[Qty] FROM [dbo].[ConsumableConsumableBrandMapping] where [ConsumableId]=" + strArrSpare[i] + " and [BrandId]=" + strArrBrand[i]);
                    int ide = 0;
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        dbCon.ExecuteQuery("update ConsumableConsumableBrandMapping set qty=(qty+" + strArrQty[i] + ") where id=" + dt.Rows[0][0].ToString());
                        ide = int.Parse(dt.Rows[0][0].ToString());
                    }
                    else
                    {
                        ide = dbCon.ExecuteScalarQueryWithParams("INSERT INTO [dbo].[ConsumableConsumableBrandMapping] ([ConsumableId],[BrandId],[Qty],[MinQty],[MaxQty],[IsActive],[IsDeleted],[DOC],[DOM],[HSNNumber])VALUES('" + strArrSpare[i] + "','" + strArrBrand[i] + "','" + strArrQty[i] + "',1,1000,1,0,getdate(),getdate(),'')  SELECT SCOPE_IDENTITY();", strArr);
                    }
                    string qry = "INSERT INTO [dbo].[ConsumableInventaryHistory]([ConsumableConsumableBrandMappingId],[Cr],[Dr],[DOC],[JobCardId],[GRNDetailId])VALUES (" + strArrSpare[i] + "," + strArrQty[i] + ",0,CONVERT(datetime, SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30')),0," + grnDid + ")";
                    dbCon.ExecuteQueryWithParams(qry, strArr);

                    dbCon.ExecuteQuery("Update Consumables Set Price=" + strArrMrp[i] + " where id=" + strArrSpare[i]);

                }
                else
                {

                    DataTable dt = dbCon.GetDataTable("SELECT id,[Qty] FROM [dbo].[SpareSpareBrandMapping] where [SpareId]=" + strArrSpare[i] + " and [BrandId]=" + strArrBrand[i]);
                    int ide = 0;
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        dbCon.ExecuteQuery("update SpareSpareBrandMapping set Mrp='" + strArrBMrp[i] + "', qty=(qty+" + strArrQty[i] + ") where id=" + dt.Rows[0][0].ToString());
                        ide = int.Parse(dt.Rows[0][0].ToString());
                    }
                    else
                    {
                        ide = dbCon.ExecuteScalarQueryWithParams("INSERT INTO [dbo].[SpareSpareBrandMapping] ([SpareId],[BrandId],[Qty],[MinQty],[MaxQty],[IsActive],[IsDeleted],[DOC],[DOM],[HSNNumber],Mrp)VALUES(" + strArrSpare[i] + "," + strArrBrand[i] + ",'" + strArrQty[i] + "',1,1000,1,0,getdate(),getdate(),'','" + strArrBMrp[i] + "')  SELECT SCOPE_IDENTITY();", strArr);
                    }
                    string msg = strArrQty[i] + " Qty Credited in invetory >> GrnId=" + grnid + " Invoice Number:" + inv + " Received By:" + recby;
                    string qry = "INSERT INTO [dbo].[SpareInventaryHistory]([SpareSpareBrandMappingId],[Cr],[Dr],[DOC],[JobCardId],[GRNDetailId],[Message]) VALUES (" + ide + ",'" + strArrQty[i] + "',0,CONVERT(datetime, SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30')),0," + grnDid + ",'" + msg.Replace("'", "''") + "')";
                    dbCon.ExecuteQueryWithParams(qry, strArr);
                    dbCon.ExecuteQuery("Update Spare Set Price='" + strArrMrp[i] + "' where id=" + strArrSpare[i]);
                }
            }
            String msgstr = "Inventary Updated GrnId - " + grnid + " ";
            try
            {
                int nItems = int.Parse(dbCon.GetDataTable("select count(id) from grndetail where grnid=" + grnid).Rows[0][0].ToString());
                if (nItems > 0)
                    msgstr += " Items Inserted - " + nItems.ToString();
                else
                    msgstr = "Something went wrong please contact I.T. Team";
            }
            catch (Exception E) { }
            try
            {
                //Clear Cache
                //HttpContext.Current.Cache["StoreInvetory-1"]=null;
            }
            catch (Exception E) { }
            objectToSerilize.Name = msgstr;
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " AddGrn Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }




    [WebMethod]
    public void PurchaseOrder(string VendorId, string strSpare, string strQty, string strPri, string strType)
    {
        //return;
        var objectToSerilize = new InsertUpdateRecord();
        JavaScriptSerializer js = new JavaScriptSerializer() { MaxJsonLength = Int32.MaxValue };
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        int OrderId = 0;
        int MasterOrderId = 0;
        try
        {
            string[] strArrSpare = strSpare.Split(new string[] { "$#@" }, StringSplitOptions.None);
            string[] strArrQty = strQty.Split(new string[] { "$#@" }, StringSplitOptions.None);
            string[] strArrPri = strPri.Split(new string[] { "$#@" }, StringSplitOptions.None);
            string[] strArrType = strType.Split(new string[] { "$#@" }, StringSplitOptions.None);
            string[] strArr = { VendorId };
            if (strArrSpare.Length > 0)
            {
                MasterOrderId = dbCon.ExecuteScalarQueryWithParams("INSERT INTO [dbo].[MasterPurchaseOrder]([DOC],[DOM])VALUES(CONVERT(datetime, SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30')),CONVERT(datetime, SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30')))  SELECT SCOPE_IDENTITY();", strArr);

                if (strType.Contains("Spare"))
                {
                    OrderId = dbCon.ExecuteScalarQueryWithParams("INSERT INTO [dbo].[PurchaseOrder]([DOC],[DOM],[VendorId],MasterPurchaseOrderId) VALUES(CONVERT(datetime, SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30')),CONVERT(datetime, SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30')),@1," + MasterOrderId + ") SELECT SCOPE_IDENTITY();", strArr);
                    for (int i = 0; i < strArrSpare.Length; i++)
                    {
                        if (strArrType[i].Equals("Spare"))
                        {
                            //string[] strspareVal = GetPartDetailFromPart(strArrSpare[i]).Split(',');
                            string[] strArr1 = { };
                            dbCon.ExecuteQueryWithParams("INSERT INTO [dbo].[PurchaseOrderItem] ([SpareId],[PurchaseOrderId] ,[DOC],[DOM] ,[OrderQty]) VALUES (" + strArrSpare[i] + "," + OrderId + " ,CONVERT(datetime, SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30')),CONVERT(datetime, SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30')) ," + strArrQty[i] + ")", strArr);
                        }
                    }
                }
                //if (strType.Contains("Consumable"))
                //{
                //    OrderId = dbCon.ExecuteScalarQueryWithParams("INSERT INTO [dbo].[PurchaseOrderConsumable]([DOC],[DOM],[VendorId]) VALUES(CONVERT(datetime, SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30')),CONVERT(datetime, SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30')),@1) SELECT SCOPE_IDENTITY();", strArr);
                //    for (int i = 0; i < strArrSpare.Length; i++)
                //    {
                //        if (strArrType[i].Equals("Consumable"))
                //        {
                //            //string[] strspareVal = GetPartDetailFromPart(strArrSpare[i]).Split(',');
                //            string[] strArr1 = { };
                //            dbCon.ExecuteQueryWithParams("INSERT INTO [dbo].[PurchaseOrderItemConsumable] ([ConsumableId],[PurchaseOrderId] ,[DOC],[DOM] ,[OrderQty]) VALUES (" + strArrSpare[i] + "," + OrderId + " ,CONVERT(datetime, SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30')),CONVERT(datetime, SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30')) ," + strArrQty[i] + ")", strArr);
                //        }
                //    }
                //}
                objectToSerilize.resultflag = "1";
                objectToSerilize.Message = "Purchase Order created - OrderId-" + MasterOrderId;
            }
            else
            {
                objectToSerilize.resultflag = "0";
                objectToSerilize.Message = "Something Went Wrong..";
            }
        }
        catch (Exception e)
        {
            objectToSerilize.resultflag = "0";
            objectToSerilize.Message = e.Message;
            dbCon.InsertLogs(ErrorMsgPrefix + " GetModelByBrandId Msg:" + e.Message, "", e.StackTrace);

        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }

    [WebMethod]
    [ScriptMethod(UseHttpGet = true, ResponseFormat = ResponseFormat.Json)]
    [System.Web.Services.Protocols.SoapHeader("SoapHeader")]
    public void GetPartsForPurchase_FromJobCard()
    {
        var objectToSerilize = new JobCardSpare1();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            string query = "SELECT        Spare.Code, Spare.Name, Spare.Id, isnull( (Select  Sum(isnull(Requisition_Spare.Quantity,0))- Sum(- isnull(Requisition_Spare.ReceivedQuantity,0)) from  Requisition_Spare where Requisition_Spare.SpareId=Spare.Id),0) - isnull((SELECT  SUM(Qty) AS Expr1 FROM            SpareSpareBrandMapping WHERE        (SpareId = Spare.Id)),0) AS Quantity FROM            Spare  where (isnull( (Select  Sum(isnull(Requisition_Spare.Quantity,0))- Sum(- isnull(Requisition_Spare.ReceivedQuantity,0)) from  Requisition_Spare where Requisition_Spare.SpareId=Spare.Id),0) - isnull((SELECT  SUM(Qty) AS Expr1 FROM           SpareSpareBrandMapping WHERE        (SpareId = Spare.Id)),0))>0";
            string[] param = { "0" };
            DataTable dt = dbCon.GetDataTableWithParams(query, param);
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    var Spares = new SparewithPrice1();
                    //Spares.Brand = dr["brandname"].ToString();
                    Spares.Id = dr["Id"].ToString();
                    Spares.Name = dr["Code"].ToString();
                    //decimal Quantity = Convert.ToDecimal(dr["Quantity"]);
                    Spares.Quantity = dr["Quantity"].ToString();
                    //Spares.PurchasePrice = dr["PurchasePrice"].ToString();
                    Spares.NType = "spare";
                    objectToSerilize.Spares.Add(Spares);
                }
                objectToSerilize.resultflag = "1";
                objectToSerilize.Message = "Success";
            }
        }
        catch (Exception ex)
        {
            objectToSerilize.resultflag = "0";
            objectToSerilize.Message = "Error";
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }


    [WebMethod]
    public void GetJobCardRequsitionV1(string Id = "0")
    {
        var objectToSerilize = new List<JobCardRequsition>();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            string query = "SELECT JobCard.Id, Vehicle.Number, isnull(Vehicle_Model.Name,'') + ',' + isnull(Vehicle_Variant.Name,'') + ',' + Vehicle_Brand.Name AS Name FROM            Vehicle_Brand RIGHT OUTER JOIN Vehicle ON Vehicle_Brand.Id = Vehicle.Vehicle_Brand_Id LEFT OUTER JOIN Vehicle_Variant ON Vehicle.Vehicle_Variant_Id = Vehicle_Variant.Id LEFT OUTER JOIN Vehicle_Model ON Vehicle.Vehicle_Model_Id = Vehicle_Model.Id RIGHT OUTER JOIN Requisition INNER JOIN JobCard ON Requisition.JobCardId = JobCard.Id ON Vehicle.Id =JobCard.Vehicle_Id GROUP BY JobCard.Id, Vehicle_Model.Name, Vehicle_Variant.Name, Vehicle_Brand.Name, Vehicle.Number having JobCard.id in (Select  JobCardId from Requisition_Spare where isnull(Requisition_Spare.IsAllocate,0)=0 And isnull(Requisition_Spare.IsDeleted,0)=0 ) " + (Id != "0" && Id != "" ? " and ( JobCard.id=" + Id + " or JobCard.id in (Select JobCardid from Requisition where id=" + Id + "))" : "");
            DataTable dt = dbCon.GetDataTable(query);
            if (dt != null && dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    var objMain = new JobCardRequsition();
                    objMain.jobcardnumber = dt.Rows[i]["Id"].ToString();
                    objMain.vehiclename = dt.Rows[i]["Name"].ToString();
                    objMain.vehiclenumber = dt.Rows[i]["Number"].ToString();

                    query = "SELECT [Id],case when isnull([IsAllocated],0)=1 then 'Green' else 'Red' end as color FROM [dbo].[Requisition] where JobCardId=" + dt.Rows[i]["Id"].ToString();
                    DataTable dt1 = dbCon.GetDataTable(query);
                    if (dt1 != null && dt1.Rows.Count > 0)
                    {
                        for (int j = 0; j < dt1.Rows.Count; j++)
                        {
                            var obj = new JobCardRequsition.itms();
                            obj.colortype = dt1.Rows[j]["color"].ToString();
                            obj.id = dt1.Rows[j]["Id"].ToString();
                            objMain.requsition.Add(obj);
                        }
                    }
                    objectToSerilize.Add(objMain);
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetJobcardRequsition Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }

    [WebMethod]
    public void GetJobCardRequsitionDoneV1(string Id = "0")
    {
        var objectToSerilize = new List<JobCardRequsition>();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            string query = "SELECT  JobCard.Id, Vehicle.Number, isnull(Vehicle_Model.Name,'') + ',' + isnull(Vehicle_Variant.Name,'') + ',' + Vehicle_Brand.Name AS Name FROM            Vehicle_Brand RIGHT OUTER JOIN Vehicle ON Vehicle_Brand.Id = Vehicle.Vehicle_Brand_Id LEFT OUTER JOIN Vehicle_Variant ON Vehicle.Vehicle_Variant_Id = Vehicle_Variant.Id LEFT OUTER JOIN Vehicle_Model ON Vehicle.Vehicle_Model_Id = Vehicle_Model.Id RIGHT OUTER JOIN Requisition INNER JOIN JobCard ON Requisition.JobCardId = JobCard.Id ON Vehicle.Id =JobCard.Vehicle_Id GROUP BY JobCard.Id, Vehicle_Model.Name, Vehicle_Variant.Name, Vehicle_Brand.Name, Vehicle.Number having JobCard.id not in (Select  JobCardId from Requisition_Spare where isnull(Requisition_Spare.IsAllocate,0)=0 And isnull(Requisition_Spare.IsDeleted,0)=0)  " + (Id != "0" && Id != "" ? " and ( JobCard.id=" + Id + " or JobCard.id in (Select JobCardid from Requisition where id=" + Id + "))" : "");
            DataTable dt = dbCon.GetDataTable(query);
            if (dt != null && dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    var objMain = new JobCardRequsition();
                    objMain.jobcardnumber = dt.Rows[i]["Id"].ToString();
                    objMain.vehiclename = dt.Rows[i]["Name"].ToString();
                    objMain.vehiclenumber = dt.Rows[i]["Number"].ToString();

                    query = "SELECT [Id],case when isnull([IsAllocated],0)=1 then 'Green' else 'Red' end as color FROM [dbo].[Requisition] where JobCardId=" + dt.Rows[i]["Id"].ToString();
                    DataTable dt1 = dbCon.GetDataTable(query);
                    if (dt1 != null && dt1.Rows.Count > 0)
                    {
                        for (int j = 0; j < dt1.Rows.Count; j++)
                        {
                            var obj = new JobCardRequsition.itms();
                            obj.colortype = dt1.Rows[j]["color"].ToString();
                            obj.id = dt1.Rows[j]["Id"].ToString();
                            objMain.requsition.Add(obj);
                        }
                    }
                    objectToSerilize.Add(objMain);
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetJobcardRequsition Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }

    [WebMethod]
    public void GetJobCardRequsition()
    {
        var objectToSerilize = new List<JobCardRequsition>();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            string query = "SELECT JobCard.Id, Vehicle.Number, isnull(Vehicle_Model.Name,'') + ',' + isnull(Vehicle_Variant.Name,'') + ',' + Vehicle_Brand.Name AS Name FROM            Vehicle_Brand RIGHT OUTER JOIN Vehicle ON Vehicle_Brand.Id = Vehicle.Vehicle_Brand_Id LEFT OUTER JOIN Vehicle_Variant ON Vehicle.Vehicle_Variant_Id = Vehicle_Variant.Id LEFT OUTER JOIN Vehicle_Model ON Vehicle.Vehicle_Model_Id = Vehicle_Model.Id RIGHT OUTER JOIN Requisition INNER JOIN JobCard ON Requisition.JobCardId = JobCard.Id ON Vehicle.Id =JobCard.Vehicle_Id GROUP BY JobCard.Id, Vehicle_Model.Name, Vehicle_Variant.Name, Vehicle_Brand.Name, Vehicle.Number having JobCard.id in (Select  JobCardId from Requisition_Spare where isnull(Requisition_Spare.IsAllocate,0)=0 And isnull(Requisition_Spare.IsDeleted,0)=0 )";
            DataTable dt = dbCon.GetDataTable(query);
            if (dt != null && dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    var objMain = new JobCardRequsition();
                    objMain.jobcardnumber = dt.Rows[i]["Id"].ToString();
                    objMain.vehiclename = dt.Rows[i]["Name"].ToString();
                    objMain.vehiclenumber = dt.Rows[i]["Number"].ToString();

                    query = "SELECT [Id],case when isnull([IsAllocated],0)=1 then 'Green' else 'Red' end as color FROM [dbo].[Requisition] where JobCardId=" + dt.Rows[i]["Id"].ToString();
                    DataTable dt1 = dbCon.GetDataTable(query);
                    if (dt1 != null && dt1.Rows.Count > 0)
                    {
                        for (int j = 0; j < dt1.Rows.Count; j++)
                        {
                            var obj = new JobCardRequsition.itms();
                            obj.colortype = dt1.Rows[j]["color"].ToString();
                            obj.id = dt1.Rows[j]["Id"].ToString();
                            objMain.requsition.Add(obj);
                        }
                    }
                    objectToSerilize.Add(objMain);
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetJobcardRequsition Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }

    [WebMethod]
    public void GetJobCardRequsitionDone()
    {
        var objectToSerilize = new List<JobCardRequsition>();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            string query = "SELECT  JobCard.Id, Vehicle.Number, isnull(Vehicle_Model.Name,'') + ',' + isnull(Vehicle_Variant.Name,'') + ',' + Vehicle_Brand.Name AS Name FROM            Vehicle_Brand RIGHT OUTER JOIN Vehicle ON Vehicle_Brand.Id = Vehicle.Vehicle_Brand_Id LEFT OUTER JOIN Vehicle_Variant ON Vehicle.Vehicle_Variant_Id = Vehicle_Variant.Id LEFT OUTER JOIN Vehicle_Model ON Vehicle.Vehicle_Model_Id = Vehicle_Model.Id RIGHT OUTER JOIN Requisition INNER JOIN JobCard ON Requisition.JobCardId = JobCard.Id ON Vehicle.Id =JobCard.Vehicle_Id GROUP BY JobCard.Id, Vehicle_Model.Name, Vehicle_Variant.Name, Vehicle_Brand.Name, Vehicle.Number having JobCard.id not in (Select  JobCardId from Requisition_Spare where isnull(Requisition_Spare.IsAllocate,0)=0 And isnull(Requisition_Spare.IsDeleted,0)=0)";
            DataTable dt = dbCon.GetDataTable(query);
            if (dt != null && dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    var objMain = new JobCardRequsition();
                    objMain.jobcardnumber = dt.Rows[i]["Id"].ToString();
                    objMain.vehiclename = dt.Rows[i]["Name"].ToString();
                    objMain.vehiclenumber = dt.Rows[i]["Number"].ToString();

                    query = "SELECT [Id],case when isnull([IsAllocated],0)=1 then 'Green' else 'Red' end as color FROM [dbo].[Requisition] where JobCardId=" + dt.Rows[i]["Id"].ToString();
                    DataTable dt1 = dbCon.GetDataTable(query);
                    if (dt1 != null && dt1.Rows.Count > 0)
                    {
                        for (int j = 0; j < dt1.Rows.Count; j++)
                        {
                            var obj = new JobCardRequsition.itms();
                            obj.colortype = dt1.Rows[j]["color"].ToString();
                            obj.id = dt1.Rows[j]["Id"].ToString();
                            objMain.requsition.Add(obj);
                        }
                    }
                    objectToSerilize.Add(objMain);
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetJobcardRequsition Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }
    [WebMethod]
    public void GetRequsitionById(string Id)
    {
        var objectToSerilize = new Requsition();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            string[] StrArr = { Id };
            string query = "SELECT  JobCard.Id, Vehicle.Number, isnull(Vehicle_Model.Name,'') + ',' + isnull(Vehicle_Variant.Name,'') + ',' + Vehicle_Brand.Name AS Name FROM Requisition INNER JOIN JobCard ON Requisition.JobCardId = JobCard.Id INNER JOIN Vehicle ON JobCard.Vehicle_Id = Vehicle.Id LEFT OUTER JOIN Vehicle_Model ON Vehicle.Vehicle_Model_Id = Vehicle_Model.Id LEFT OUTER JOIN Vehicle_Variant ON Vehicle.Vehicle_Variant_Id = Vehicle_Variant.Id LEFT OUTER JOIN Vehicle_Brand ON Vehicle.Vehicle_Brand_Id = Vehicle_Brand.Id GROUP BY JobCard.Id, Vehicle_Model.Name, Vehicle_Variant.Name, Vehicle_Brand.Name, Vehicle.Number, Vehicle.Number,Requisition.Id having Requisition.Id=@1 ";
            DataTable dt = dbCon.GetDataTableWithParams(query, StrArr);
            if (dt != null && dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objectToSerilize.jobcardnumber = dt.Rows[i]["Id"].ToString();
                    objectToSerilize.requsitionnumber = Id;
                    objectToSerilize.vehicle = dt.Rows[i]["Name"].ToString() + ',' + dt.Rows[i]["Number"].ToString();
                    query = "SELECT IsDeleted,[Id],(select Code from Spare where id=spareid) as sname,[SpareId],isnull([Quantity],0) as [Quantity],isnull([ReceivedQuantity],0) as [ReceivedQuantity],[IsAllocate],isnull((Select top 1 amount from JobCard_Spare_Mapping where JobCard_Spare_Mapping.SpareId=[Requisition_Spare].SpareId and JobCard_Spare_Mapping.JobCardId=[Requisition_Spare].JobCardId and id=[Requisition_Spare].SpareMappingId ),0) as Amount FROM [dbo].[Requisition_Spare] where RequisitionId=@1";
                    DataTable dt1 = dbCon.GetDataTableWithParams(query, StrArr);
                    if (dt1 != null && dt1.Rows.Count > 0)
                    {
                        for (int j = 0; j < dt1.Rows.Count; j++)
                        {
                            var obj = new Requsition.itms();
                            obj.id = dt1.Rows[j]["Id"].ToString();
                            obj.Name = dt1.Rows[j]["sname"].ToString();
                            obj.qty = dt1.Rows[j]["Quantity"].ToString();
                            obj.rqty = dt1.Rows[j]["ReceivedQuantity"].ToString();
                            obj.isallocate = dt1.Rows[j]["IsAllocate"].ToString();
                            obj.isdeleted = dt1.Rows[j]["IsDeleted"].ToString();
                            obj.price = dt1.Rows[j]["Amount"].ToString();
                            query = "SELECT [BrandId],(select name from Spare_Brand where id=BrandId) as name,Qty FROM [dbo].[SpareSpareBrandMapping] where [SpareId]=" + dt1.Rows[j]["SpareId"].ToString();
                            DataTable dt2 = dbCon.GetDataTable(query);
                            for (int k = 0; k < dt2.Rows.Count; k++)
                            {
                                var objsub = new Requsition.itms.availablebrand();
                                objsub.id = dt2.Rows[k]["BrandId"].ToString();
                                objsub.Name = dt2.Rows[k]["name"].ToString();
                                objsub.Qty = dt2.Rows[k]["qty"].ToString();
                                obj.itm.Add(objsub);
                            }
                            objectToSerilize.requsition.Add(obj);
                        }
                    }
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetRequisitionById Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }

    [WebMethod]
    public void UpdateRequsition(string str, string dtdt)
    {
        var objectToSerilize = new Objs2();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            objectToSerilize.Id = "0";
            string[] strArrResult = str.Split(new string[] { "$#@" }, StringSplitOptions.None);
            for (int i = 0; i < strArrResult.Length; i++)
            {
                string[] strArrItem = strArrResult[i].Split(new string[] { "," }, StringSplitOptions.None);
                if (strArrItem != null && strArrItem.Length >= 3)
                {
                    string query = "SELECT [SpareId],isnull((Quantity-isnull(ReceivedQuantity,0)),0) as qty,RequisitionId FROM [dbo].[Requisition_Spare] where id=" + strArrItem[0];
                    DataTable dt2 = dbCon.GetDataTable(query);
                    if (dt2 != null && dt2.Rows.Count > 0)
                    {
                        string SpareId = dt2.Rows[0][0].ToString();
                        string QtyNeeded = dt2.Rows[0][1].ToString();
                        string RequsitionId = dt2.Rows[0][2].ToString();
                        query = "SELECT isnull(Qty,0) as Qty,Id FROM [dbo].[SpareSpareBrandMapping] where BrandId=" + strArrItem[1] + " And  [SpareId]=" + SpareId;
                        DataTable dt = dbCon.GetDataTable(query);
                        if (dt != null && dt.Rows.Count > 0)
                        {
                            string AvailableQty = dt.Rows[0][0].ToString();
                            //if (float.Parse(AvailableQty) >= float.Parse(strArrItem[2]) && float.Parse(QtyNeeded) >= float.Parse(strArrItem[2]))
                            if (float.Parse(QtyNeeded) >= float.Parse(strArrItem[2]))
                            {
                                string SpareSpareBrandId = dt.Rows[0][1].ToString();
                                string[] strArrP = { strArrItem[2], strArrItem[0], SpareSpareBrandId };
                                string msg = strArrItem[2] + " Qty Debited in invetory >> Requisition Id=" + RequsitionId;
                                query = "INSERT INTO [dbo].[SpareInventaryHistory] ([SpareSpareBrandMappingId],[Cr],[Dr],[DOC],[JobCardId],[OrderItemDetailId],[GRNDetailId],[RequsitionSpareId],[WorkshopId],[message]) VALUES(" + SpareSpareBrandId + ",0,@1,CONVERT(datetime, SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30')),0,0,0,@2,1,'" + msg + "')";
                                if (dbCon.ExecuteQueryWithParams(query, strArrP) > 0)
                                {
                                    query = "UPDATE [dbo].[SpareSpareBrandMapping] SET [Qty] =([Qty]-@1)  WHERE  id=@3";
                                    if (dbCon.ExecuteQueryWithParams(query, strArrP) > 0)
                                    {
                                        query = "UPDATE [dbo].[Requisition_Spare] SET [ReceivedQuantity] =(isnull([ReceivedQuantity],0)+@1) ,IsAllocate=" + (float.Parse(QtyNeeded) == float.Parse(strArrItem[2]) ? "1" : "0") + ",AllocateTime='" + dbCon.getindiantime() + "' WHERE id=@2";
                                        if (dbCon.ExecuteQueryWithParams(query, strArrP) > 0)
                                        {
                                            objectToSerilize.Id = "1";
                                            query = "SELECT Id FROM [dbo].[Requisition_Spare] where RequisitionId=" + RequsitionId + " and IsAllocate=0 and ISNULL(IsDeleted,0)=0";
                                            DataTable dtv = dbCon.GetDataTable(query);
                                            if (dtv.Rows.Count == 0)
                                            {
                                                query = "UPDATE [dbo].[Requisition] SET [IsAllocated] = 1,AllocatedTime='" + dtdt + "' where id=" + RequsitionId;
                                                dbCon.ExecuteQuery(query);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                try
                {
                    if (strArrItem != null && strArrItem.Length >= 4)
                    {
                        string query = "update JobCard_Spare_Mapping set Amount='" + strArrItem[3] + "' where id =( SELECT SpareMappingId FROM [dbo].[Requisition_Spare] where id=" + strArrItem[0] + ")";
                        dbCon.ExecuteQuery(query);
                    }
                }
                catch (Exception E) { }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " UpdateRequisition Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }

    [WebMethod]
    public void DeleteRequsition(string id)
    {
        var objectToSerilize = new Objs2();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        objectToSerilize.Name = "Fail";
        try
        {
            objectToSerilize.Id = "0";
            string[] strArrP = { id };
            string str = "Select id from Requisition_Spare where RequisitionId=@1 and IsAllocate=1";
            if (dbCon.GetDataTableWithParams(str, strArrP).Rows.Count == 0)
            {
                string query = "Delete From requisition where id=@1";
                if (dbCon.ExecuteQueryWithParams(query, strArrP) > 0)
                {
                    query = "Delete from Requisition_Spare where RequisitionId=@1";
                    if (dbCon.ExecuteQueryWithParams(query, strArrP) > 0)
                    {
                        objectToSerilize.Name = "Success";
                    }
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " DeleteRequsition Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }

    [WebMethod]
    public void UpdateService(string id, string name, string isactive, string catid, string amount, string taxid, string hsn)
    {
        var objectToSerilize = new Objs2();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            dbConnection dbCon = new dbConnection();
            if (id != "0")
            {
                String[] Strarr = { name.Replace("'", "''"), (isactive == "true" ? "1" : "0"), id, catid, amount, taxid, hsn };
                dbCon.ExecuteQueryWithParams("update Service Set name=@1, IsActive=@2,CategoryId=@4,Price=@5,taxid=@6,Hsn=@7 where id=@3", Strarr);
            }
            else
            {
                String[] Strarr = { name.Replace("'", "''"), (isactive == "true" ? "1" : "0"), catid, amount, taxid, hsn };
                dbCon.ExecuteQueryWithParams("INSERT INTO [dbo].[Service] ([Name],[IsActive],[IsDeleted],[DOC],[DOM],CategoryId,Price,Taxid,Hsn) VALUES (@1,@2,0,getdate(),getdate(),@3,@4,@5,@6)", Strarr);
            }
            objectToSerilize.Id = "1";
        }
        catch (Exception e)
        {
            objectToSerilize.Id = "0";
            dbCon.InsertLogs(ErrorMsgPrefix + " UpdateService Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }


    [WebMethod]
    public void GetServiceById(string id)
    {
        var objectToSerilize = new Service();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            if (!String.IsNullOrWhiteSpace(id))
            {
                String[] Strarr = { id };
                DataTable dt = dbCon.GetDataTableWithParams("SELECT [Name],[IsActive],categoryid,Price,isnull(TaxId,0) as TaxId,Hsn FROM [dbo].[Service] where id=@1", Strarr);
                objectToSerilize.name = dt.Rows[0][0].ToString();
                //chkIsActive.Checked = (bool)dt.Rows[0][1];
                objectToSerilize.catid = dt.Rows[0][2].ToString();
                objectToSerilize.amount = dt.Rows[0][3].ToString();
                objectToSerilize.taxid = dt.Rows[0]["TaxId"].ToString();
                objectToSerilize.hsn = dt.Rows[0]["Hsn"].ToString();
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetServiceById Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }

    [WebMethod]
    public void GetJobCardPayment(string id = "0")
    {
        var objMain = new List<JoCardAmount>();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            string query = "SELECT  JobCard.Id,isnull(Vehicle_Model.Name,'-') as Model, isnull(Vehicle_Brand.Name,'-') AS BrandName, isnull(Vehicle_Variant.Name,'-') AS Variant, isnull(Vehicle.Number,'-') as Number, isnull(Customer.Name,'-') AS CustomerName, isnull(Customer.Email,'-') as email, isnull(Customer.Mobile,'') mobile FROM   Customer RIGHT OUTER JOIN JobCard ON Customer.Id = JobCard.Customer_Id LEFT OUTER JOIN Vehicle LEFT OUTER JOIN Vehicle_Variant ON Vehicle.Vehicle_Variant_Id = Vehicle_Variant.Id LEFT OUTER JOIN Vehicle_Brand ON Vehicle.Vehicle_Brand_Id = Vehicle_Brand.Id LEFT OUTER JOIN Vehicle_Model ON Vehicle.Vehicle_Model_Id = Vehicle_Model.Id ON JobCard.Vehicle_Id = Vehicle.Id" + (id != "0" ? " where jobcard.id=" + id : "");
            DataTable dt = dbCon.GetDataTable(query);
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                var obj = new JoCardAmount();
                obj.CustomerName = dt.Rows[i]["CustomerName"].ToString();
                obj.Mobile = dt.Rows[i]["email"].ToString();
                obj.Email = dt.Rows[i]["mobile"].ToString();
                obj.JobCardId = dt.Rows[i]["Id"].ToString();
                obj.VehicleName = dt.Rows[i]["BrandName"].ToString() + "," + dt.Rows[i]["Model"].ToString() + "," + dt.Rows[i]["Variant"].ToString() + "," + dt.Rows[i]["Number"].ToString();
                query = "SELECT [Id],[JobCardId],[PaymentType],[ChequeNumber],[BankName],[TransactionNumber],[Amount],[WorkShopId],ChequeDate FROM [dbo].[JobCardPayment] where JobCardid=" + dt.Rows[i]["Id"].ToString();
                DataTable dt1 = dbCon.GetDataTable(query);
                for (int j = 0; j < dt1.Rows.Count; j++)
                {
                    var objsub = new JoCardAmount.Payment();
                    objsub.Amount = dt1.Rows[j]["Amount"].ToString();
                    objsub.BankName = dt1.Rows[j]["BankName"].ToString();
                    objsub.ChequeNumber = dt1.Rows[j]["ChequeNumber"].ToString();
                    objsub.PaymentType = dt1.Rows[j]["PaymentType"].ToString();
                    objsub.TrnId = dt1.Rows[j]["TransactionNumber"].ToString();
                    objsub.ChequeDate = dt1.Rows[j]["ChequeDate"].ToString();
                    obj.payment.Add(objsub);
                }
                objMain.Add(obj);
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetJobCard Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objMain));
    }

    [WebMethod]
    public void UpdateJobcardPayment(string date, string jocardid, string type, string amount, string chequenumber, string bank, string chequedate, string trnid = "", string receiptno = "", string id = "0", string remark = "", string paidBy = "")
    {
        var objectToSerilize = new Objs2();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            string[] strArr = { jocardid, type, amount, chequenumber, bank, chequedate, date, remark, id, receiptno, paidBy };
            if (id == "0" || id == "-1")
            {
                string query = "INSERT INTO [dbo].[JobCardPayment]([JobCardId],[PaymentType],[ChequeNumber],[ChequeDate],[BankName],[Amount],[DOP],remark,ReceiptNo,PaidBy) VALUES (@1,@2,@4,@6,@5,@3,@7,@8,@10,@11) SELECT SCOPE_IDENTITY();";
                int i = dbCon.ExecuteScalarQueryWithParams(query, strArr);
                objectToSerilize.Id = i.ToString();
                objectToSerilize.Name = "Success";
            }
            else
            {
                string query = "update [dbo].[JobCardPayment] Set [PaymentType]=@2,[ChequeNumber]=@4,[BankName]=@5,[Amount]=@3,remark=@8,ChequeDate=@6,DOP=@7,ReceiptNo=@10,PaidBy=@11 where id=@9";
                int i = dbCon.ExecuteScalarQueryWithParams(query, strArr);
                objectToSerilize.Id = "0";
                objectToSerilize.Name = "Success";
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " InsertPayment Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }
    [WebMethod]
    public void GetHSN()
    {
        var objectToSerilize = new List<Objs2>();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            string query = "SELECT distinct HSNNumber FROM [dbo].[Spare]  where len(HSNNumber)>0";
            DataTable dt = dbCon.GetDataTable(query);
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                var obj = new Objs2();
                obj.Name = dt.Rows[i][0].ToString();
                objectToSerilize.Add(obj);
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetHSN Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }


    [WebMethod]
    public void GetJobcardVehicleDetailAndCustomerDetail()
    {
        var objectToSerilize = new List<Objs2>();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            string query = "SELECT distinct HSNNumber FROM [dbo].[Spare]  where len(HSNNumber)>0";
            DataTable dt = dbCon.GetDataTable(query);
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                var obj = new Objs2();
                obj.Name = dt.Rows[i][0].ToString();
                objectToSerilize.Add(obj);
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetHSN Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }

    [WebMethod]
    public void testChart()
    {
        var objectToSerilize = new List<Objs3>();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            for (int i = 1; i <= 5; i++)
            {
                var obj = new Objs3();
                obj.label = "Name" + i.ToString();
                obj.y = "20";
                objectToSerilize.Add(obj);
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetHSN Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }
    [WebMethod]
    public void UD(string Spare, string Service)
    {
        decimal TotalCGSTForSpare = 0;
        decimal TotalSGSTforService = 0;
        decimal FinalAmount = 0;
        bool ShouldUpdateTotalGST = false;
        var objectToSerilize = new Objs2();
        string EstimateId = "0";
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            dbCon.InsertLogs(" Discount Msg:Spare - " + Spare + " Service - " + Service, "", "");
            //get Items
            string InvoiceId = "0";
            string[] strArrSpare = Spare.Split(new string[] { "$#@" }, StringSplitOptions.None);
            string[] strArrService = Service.Split(new string[] { "$#@" }, StringSplitOptions.None);
            dbCon.InsertLogs(" Discount 1", "", "");
            for (int i = 0; i < strArrSpare.Length; i++)
            {
                string[] strItem = strArrSpare[i].Split(',');
                if (strItem.Length >= 4)
                {
                    //string query = "SELECT isnull([ActualAmountPerUnit],0)+isnull([DiscountPerUnit],0) as Amount,[Quantity],InvoiceId FROM [dbo].[Invoice_Spare_Mapping] where id=" + strItem[0];
                    string query = "SELECT isnull([ActualAmountPerUnit],0) as Amount,[Quantity], EstimateId as InvoiceId FROM [dbo].[Estimate_Spare_Mapping] where id=" + strItem[0];
                    DataTable dt = dbCon.GetDataTable(query);
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        InvoiceId = dt.Rows[0]["InvoiceId"].ToString();

                        float ft_Qty = float.Parse(dt.Rows[0]["Quantity"].ToString());
                        decimal dc_Amount = decimal.Parse(dt.Rows[0]["Amount"].ToString());
                        bool isInPer = false;
                        if (strItem[1].Contains("%"))
                        {
                            isInPer = true;
                            strItem[1] = strItem[1].Replace("%", "");
                        }
                        decimal _finalamount = Convert.ToDecimal(strItem[2]);
                        decimal _SGSTamount = Convert.ToDecimal(strItem[3]);
                        TotalSGSTforService += _SGSTamount;
                        TotalCGSTForSpare += _SGSTamount;
                        decimal dc_DiscountPerUnit = (isInPer ? ((dc_Amount * decimal.Parse(strItem[1])) / 100) : decimal.Parse(strItem[1]));
                        decimal dc_AmountAfterDiscount = dc_Amount - dc_DiscountPerUnit;
                        decimal dc_TotalDiscount = dc_DiscountPerUnit * (decimal)ft_Qty;
                        decimal dc_TotalAmountAfterDiscount = dc_AmountAfterDiscount * (decimal)ft_Qty;
                        string[] strArr = { dc_DiscountPerUnit.ToString(), dc_AmountAfterDiscount.ToString(), dc_TotalDiscount.ToString(), dc_TotalAmountAfterDiscount.ToString(), strItem[0], _SGSTamount.ToString(), _finalamount.ToString() };
                        if (dc_DiscountPerUnit <= dc_Amount)
                        {
                            //string sql = "UPDATE [dbo].[Invoice_Spare_Mapping] SET [DiscountPerUnit] =@1 ,[ActualAmountPerUnit] =@2 ,[TotalDiscount] =@3 ,[TotalActualAmount] =@4   WHERE id=@5";
                            string sql = "UPDATE [dbo].[Estimate_Spare_Mapping] SET [DiscountPerUnit] =@1 ,[TotalDiscount] =@3,SGSTAmount=@6, CGSTAmount=@6,TotalActualAmount=@7   WHERE id=@5";
                            dbCon.ExecuteQueryWithParams(sql, strArr);
                            ShouldUpdateTotalGST = true;
                            EstimateId = InvoiceId;
                        }

                    }
                }
            }
            dbCon.InsertLogs(" Discount 2", "", "");
            for (int i = 0; i < strArrService.Length; i++)
            {
                string[] strItem = strArrService[i].Split(',');
                if (strItem.Length >= 4)
                {
                    //string query = "SELECT InvoiceId,isnull([ActualAmountPerUnit],0)+isnull([DiscountPerUnit],0) as Amount,SGSTAmount,CGSTAmount,[Quantity] FROM [dbo].[Invoice_Service_Mapping] where id=" + strItem[0];
                    string query = "SELECT EstimateId as InvoiceId,isnull([ActualAmountPerUnit],0) as Amount,SGSTAmount,CGSTAmount,[Quantity] FROM [dbo].[Estimate_Service_Mapping] where id=" + strItem[0];
                    DataTable dt = dbCon.GetDataTable(query);
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        InvoiceId = dt.Rows[0]["InvoiceId"].ToString();
                        float ft_Qty = float.Parse(dt.Rows[0]["Quantity"].ToString());
                        decimal dc_Amount = decimal.Parse(dt.Rows[0]["Amount"].ToString());
                        decimal SGSTAmount = decimal.Parse(dt.Rows[0]["SGSTAmount"].ToString());
                        decimal CGSTAmount = decimal.Parse(dt.Rows[0]["CGSTAmount"].ToString());

                        bool isInPer = false;
                        if (strItem[1].Contains("%"))
                        {
                            isInPer = true;
                            strItem[1] = strItem[1].Replace("%", "");
                        }
                        decimal _finalamount = Convert.ToDecimal(strItem[2]);
                        decimal _SGSTamount = Convert.ToDecimal(strItem[3]);
                        TotalSGSTforService += _SGSTamount;
                        TotalCGSTForSpare += _SGSTamount; ;
                        decimal dc_DiscountPerUnit = (isInPer ? ((((dc_Amount - SGSTAmount) - CGSTAmount) * decimal.Parse(strItem[1])) / 100) : decimal.Parse(strItem[1]));

                        //decimal dc_DiscountPerUnit = decimal.Parse(strItem[1]);
                        decimal dc_AmountAfterDiscount = dc_Amount - dc_DiscountPerUnit;
                        decimal dc_TotalDiscount = dc_DiscountPerUnit * (decimal)ft_Qty;
                        decimal dc_TotalAmountAfterDiscount = dc_AmountAfterDiscount * (decimal)ft_Qty;
                        string[] strArr = { dc_DiscountPerUnit.ToString(), dc_AmountAfterDiscount.ToString(), dc_TotalDiscount.ToString(), dc_TotalAmountAfterDiscount.ToString(), strItem[0], _SGSTamount.ToString(), _finalamount.ToString() };
                        if (dc_DiscountPerUnit <= dc_Amount)
                        {
                            //  string sql = "UPDATE [dbo].[Invoice_Service_Mapping] SET [DiscountPerUnit] =@1 ,[ActualAmountPerUnit] =@2 ,[TotalDiscount] =@3 ,[TotalActualAmount] =@4   WHERE id=@5";
                            string sql = "UPDATE [dbo].[Estimate_Service_Mapping] SET [DiscountPerUnit] =@1 ,[TotalDiscount] =@3,SGSTAmount=@6, CGSTAmount=@6,TotalActualAmount=@7  WHERE id=@5";
                            dbCon.ExecuteQueryWithParams(sql, strArr);
                            ShouldUpdateTotalGST = true;
                            EstimateId = InvoiceId;
                        }
                    }
                }
            }
            dbCon.InsertLogs(" Discount 3", "", "");
            //try
            //{
            //    string strq = "Select (select Sum(isnull(TotalActualAmount,0)) from Invoice_Spare_Mapping where InvoiceId=" + InvoiceId + ") as TotalSpare ,(select Sum(isnull(TotalActualAmount,0)) from Invoice_Service_Mapping where InvoiceId=" + InvoiceId + ") as TotalService,(select Sum(isnull(TotalDiscount,0)) from Invoice_Spare_Mapping where InvoiceId=" + InvoiceId + ") as TotalDiscountSpare,(select Sum(isnull(TotalDiscount,0)) from Invoice_Service_Mapping where InvoiceId=" + InvoiceId + ") as TotalDiscountService ";
            //    DataTable dt = dbCon.GetDataTable(strq);
            //    if (dt != null && dt.Rows.Count > 0)
            //    {
            //        decimal dc_SpareAmount = decimal.Parse(dt.Rows[0]["TotalSpare"].ToString());
            //        decimal dc_ServiceAmount = decimal.Parse(dt.Rows[0]["TotalService"].ToString());
            //        decimal dc_SpareDiscountAmount = decimal.Parse(dt.Rows[0]["TotalDiscountSpare"].ToString());
            //        decimal dc_ServiceDiscountAmount = decimal.Parse(dt.Rows[0]["TotalDiscountService"].ToString());

            //        strq = "UPDATE [dbo].[Invoice] SET [TotalSpareAmount] = " + dc_SpareAmount + " ,[TotalServiceAmount] = " + dc_ServiceAmount + " , [FinalTotal] =((isnull([FinalTotal],0)+isnull([TotalDiscount],0))-" + (dc_SpareDiscountAmount + dc_ServiceDiscountAmount) + "),[TotalDiscount] = " + (dc_SpareDiscountAmount + dc_ServiceDiscountAmount) + "   where id=" + InvoiceId;
            //        dbCon.ExecuteQuery(strq);
            //    }
            //}
            //catch (Exception E)
            //{

            //}
            if (ShouldUpdateTotalGST && !String.IsNullOrWhiteSpace(EstimateId) && EstimateId != "0")
            {
                string query = "Update Estimate set TotalSGST=@2 , TotalCGST=@3  where Id=@1 ";
                string[] param = { EstimateId, TotalCGSTForSpare.ToString(), TotalSGSTforService.ToString() };
                dbCon.ExecuteQueryWithParams(query, param);
            }
            dbCon.InsertLogs(" Discount 4", "", "");
            objectToSerilize.Name = "Success";
        }
        catch (Exception e)
        {
            objectToSerilize.Name = "Fail";
            dbCon.InsertLogs(ErrorMsgPrefix + " UpdateDiscount Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }


    //Made By Jaydeep (JD)
    [WebMethod]
    public void UD1(string Spare, string Service)
    {
        var objectToSerilize = new Objs2();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            dbCon.InsertLogs(" Discount Msg:Spare - " + Spare + " Service - " + Service, "", "");
            //get Items
            string InvoiceId = "0";
            string[] strArrSpare = Spare.Split(new string[] { "$#@" }, StringSplitOptions.None);
            string[] strArrService = Service.Split(new string[] { "$#@" }, StringSplitOptions.None);
            dbCon.InsertLogs(" Discount 1", "", "");
            for (int i = 0; i < strArrSpare.Length; i++)
            {
                string[] strItem = strArrSpare[i].Split(',');
                if (strItem.Length >= 2)
                {
                    //string query = "SELECT isnull([ActualAmountPerUnit],0)+isnull([DiscountPerUnit],0) as Amount,[Quantity],InvoiceId FROM [dbo].[Invoice_Spare_Mapping] where id=" + strItem[0];
                    string query = "SELECT isnull([ActualAmountPerUnit],0) as Amount,[Quantity],InvoiceId FROM [dbo].[Invoice_Spare_Mapping] where id=" + strItem[0];
                    DataTable dt = dbCon.GetDataTable(query);
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        InvoiceId = dt.Rows[0]["InvoiceId"].ToString();
                        float ft_Qty = float.Parse(dt.Rows[0]["Quantity"].ToString());
                        decimal dc_Amount = decimal.Parse(dt.Rows[0]["Amount"].ToString());
                        float famount = (float.Parse(dc_Amount.ToString()) / ft_Qty);
                        dc_Amount = Convert.ToDecimal((famount));

                        bool isInPer = false;
                        if (strItem[1].Contains("%"))
                        {
                            isInPer = true;
                            strItem[1] = strItem[1].Replace("%", "");
                        }
                        decimal dc_DiscountPerUnit = (isInPer ? ((dc_Amount * decimal.Parse(strItem[1])) / 100) : Convert.ToDecimal(float.Parse(strItem[1]) / ft_Qty));
                        decimal dc_AmountAfterDiscount = dc_Amount - dc_DiscountPerUnit;
                        decimal dc_TotalDiscount = dc_DiscountPerUnit * (decimal)ft_Qty;
                        decimal dc_TotalAmountAfterDiscount = dc_AmountAfterDiscount * (decimal)ft_Qty;
                        string[] strArr = { dc_DiscountPerUnit.ToString(), dc_AmountAfterDiscount.ToString(), dc_TotalDiscount.ToString(), dc_TotalAmountAfterDiscount.ToString(), strItem[0] };
                        if (dc_DiscountPerUnit <= dc_Amount)
                        {
                            //string sql = "UPDATE [dbo].[Invoice_Spare_Mapping] SET [DiscountPerUnit] =@1 ,[ActualAmountPerUnit] =@2 ,[TotalDiscount] =@3 ,[TotalActualAmount] =@4   WHERE id=@5";
                            string sql = "UPDATE [dbo].[Invoice_Spare_Mapping] SET [DiscountPerUnit] =@1 ,[TotalDiscount] =@3   WHERE id=@5";
                            dbCon.ExecuteQueryWithParams(sql, strArr);
                        }

                    }
                }
            }
            dbCon.InsertLogs(" Discount 2", "", "");
            for (int i = 0; i < strArrService.Length; i++)
            {
                string[] strItem = strArrService[i].Split(',');
                if (strItem.Length >= 2)
                {
                    //string query = "SELECT InvoiceId,isnull([ActualAmountPerUnit],0)+isnull([DiscountPerUnit],0) as Amount,SGSTAmount,CGSTAmount,[Quantity] FROM [dbo].[Invoice_Service_Mapping] where id=" + strItem[0];
                    string query = "SELECT InvoiceId,isnull([ActualAmountPerUnit],0) as Amount,SGSTAmount,CGSTAmount,[Quantity] FROM [dbo].[Invoice_Service_Mapping] where id=" + strItem[0];
                    DataTable dt = dbCon.GetDataTable(query);
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        InvoiceId = dt.Rows[0]["InvoiceId"].ToString();
                        float ft_Qty = float.Parse(dt.Rows[0]["Quantity"].ToString());
                        decimal dc_Amount = decimal.Parse(dt.Rows[0]["Amount"].ToString());
                        decimal SGSTAmount = decimal.Parse(dt.Rows[0]["SGSTAmount"].ToString());
                        decimal CGSTAmount = decimal.Parse(dt.Rows[0]["CGSTAmount"].ToString());

                        bool isInPer = false;
                        if (strItem[1].Contains("%"))
                        {
                            isInPer = true;
                            strItem[1] = strItem[1].Replace("%", "");
                        }
                        decimal dc_DiscountPerUnit = (isInPer ? ((((dc_Amount - SGSTAmount) - CGSTAmount) * decimal.Parse(strItem[1])) / 100) : decimal.Parse(strItem[1]));

                        //decimal dc_DiscountPerUnit = decimal.Parse(strItem[1]);
                        decimal dc_AmountAfterDiscount = dc_Amount - dc_DiscountPerUnit;
                        decimal dc_TotalDiscount = dc_DiscountPerUnit * (decimal)ft_Qty;
                        decimal dc_TotalAmountAfterDiscount = dc_AmountAfterDiscount * (decimal)ft_Qty;
                        string[] strArr = { dc_DiscountPerUnit.ToString(), dc_AmountAfterDiscount.ToString(), dc_TotalDiscount.ToString(), dc_TotalAmountAfterDiscount.ToString(), strItem[0] };
                        if (dc_DiscountPerUnit <= dc_Amount)
                        {
                            //  string sql = "UPDATE [dbo].[Invoice_Service_Mapping] SET [DiscountPerUnit] =@1 ,[ActualAmountPerUnit] =@2 ,[TotalDiscount] =@3 ,[TotalActualAmount] =@4   WHERE id=@5";
                            string sql = "UPDATE [dbo].[Invoice_Service_Mapping] SET [DiscountPerUnit] =@1 ,[TotalDiscount] =@3  WHERE id=@5";
                            dbCon.ExecuteQueryWithParams(sql, strArr);
                        }
                    }
                }
            }
            dbCon.InsertLogs(" Discount 3", "", "");
            //try
            //{
            //    string strq = "Select (select Sum(isnull(TotalActualAmount,0)) from Invoice_Spare_Mapping where InvoiceId=" + InvoiceId + ") as TotalSpare ,(select Sum(isnull(TotalActualAmount,0)) from Invoice_Service_Mapping where InvoiceId=" + InvoiceId + ") as TotalService,(select Sum(isnull(TotalDiscount,0)) from Invoice_Spare_Mapping where InvoiceId=" + InvoiceId + ") as TotalDiscountSpare,(select Sum(isnull(TotalDiscount,0)) from Invoice_Service_Mapping where InvoiceId=" + InvoiceId + ") as TotalDiscountService ";
            //    DataTable dt = dbCon.GetDataTable(strq);
            //    if (dt != null && dt.Rows.Count > 0)
            //    {
            //        decimal dc_SpareAmount = decimal.Parse(dt.Rows[0]["TotalSpare"].ToString());
            //        decimal dc_ServiceAmount = decimal.Parse(dt.Rows[0]["TotalService"].ToString());
            //        decimal dc_SpareDiscountAmount = decimal.Parse(dt.Rows[0]["TotalDiscountSpare"].ToString());
            //        decimal dc_ServiceDiscountAmount = decimal.Parse(dt.Rows[0]["TotalDiscountService"].ToString());

            //        strq = "UPDATE [dbo].[Invoice] SET [TotalSpareAmount] = " + dc_SpareAmount + " ,[TotalServiceAmount] = " + dc_ServiceAmount + " , [FinalTotal] =((isnull([FinalTotal],0)+isnull([TotalDiscount],0))-" + (dc_SpareDiscountAmount + dc_ServiceDiscountAmount) + "),[TotalDiscount] = " + (dc_SpareDiscountAmount + dc_ServiceDiscountAmount) + "   where id=" + InvoiceId;
            //        dbCon.ExecuteQuery(strq);
            //    }
            //}
            //catch (Exception E)
            //{

            //}
            dbCon.InsertLogs(" Discount 4", "", "");
            objectToSerilize.Name = "Success";
        }
        catch (Exception e)
        {
            objectToSerilize.Name = "Fail";
            dbCon.InsertLogs(ErrorMsgPrefix + " UpdateDiscount Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }




    #region Classes

    public class JoCardAmount
    {
        public string CustomerName { get; set; }
        public string Mobile { get; set; }
        public string Email { get; set; }
        public string VehicleName { get; set; }
        public string JobCardId { get; set; }

        public List<Payment> payment { get; set; }

        public JoCardAmount()
        {
            payment = new List<Payment>();
        }

        public class Payment
        {
            public string Amount { get; set; }
            public string ChequeNumber { get; set; }
            public string ChequeDate { get; set; }
            public string BankName { get; set; }
            public string TrnId { get; set; }
            public string PaymentType { get; set; }
        }

    }
    public class Service
    {
        public string name { get; set; }
        public string amount { get; set; }
        public string catid { get; set; }
        public string taxid { get; set; }
        public string hsn { get; set; }

    }
    public class JobCardRequsition
    {
        public string jobcardnumber { get; set; }
        public string vehiclename { get; set; }
        public string vehiclenumber { get; set; }
        public List<itms> requsition { get; set; }

        public JobCardRequsition()
        {
            requsition = new List<itms>();
        }

        public class itms
        {
            public string id { get; set; }
            public string colortype { get; set; }
        }
    }
    public class Requsition
    {

        public string jobcardnumber { get; set; }
        public string requsitionnumber { get; set; }
        public string vehicle { get; set; }
        public Requsition()
        {
            requsition = new List<itms>();
        }
        public List<itms> requsition { get; set; }
        public class itms
        {
            public string id { get; set; }
            public string Name { get; set; }
            public string qty { get; set; }
            public string rqty { get; set; }
            public string isallocate { get; set; }
            public string price { get; set; }
            public string isdeleted { get; set; }
            public itms()
            {
                itm = new List<availablebrand>();
            }
            public List<availablebrand> itm { get; set; }
            public class availablebrand
            {
                public string id { get; set; }
                public string Name { get; set; }
                public string Qty { get; set; }
            }
        }
    }
    public class JobCardSpare1
    {
        public string resultflag { get; set; }
        public string Message { get; set; }
        public List<SparewithPrice1> Spares { get; set; }

        public JobCardSpare1()
        {
            resultflag = "";
            Message = "";
            Spares = new List<SparewithPrice1>();
        }
    }
    public class SparewithPrice1
    {
        public String Id { get; set; }
        public String Name { get; set; }
        public String Brand { get; set; }
        public String Quantity { get; set; }
        public String PurchasePrice { get; set; }
        public String NType { get; set; }
        public SparewithPrice1()
        {
            Id = "";
            Name = "";
            Quantity = "";
            NType = "";
            PurchasePrice = "";

        }
    }
    public class ServicewithPrice1
    {
        public String Id { get; set; }
        public String Name { get; set; }
        public String Price { get; set; }
        public ServicewithPrice1()
        {
            Id = "";
            Name = "";
            Price = "";
        }
    }
    public class InsertUpdateRecord
    {
        public string resultflag { get; set; }
        public string Message { get; set; }

        public InsertUpdateRecord()
        {
            resultflag = "";
            Message = "";
        }
    }

    public class SpareNConsumable
    {
        public String Id { get; set; }
        public String Name { get; set; }
        public String PurchasePrice { get; set; }
        public String type { get; set; }
        public SpareNConsumable()
        {
            Id = "";
            PurchasePrice = "";
            type = "";
            Name = "";
        }
    }
    public class Objs
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public List<Objs1> Items { get; set; }
        public Objs()
        {
            Items = new List<Objs1>();
        }
    }
    public class Objs1
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public List<Objs2> Items { get; set; }
        public Objs1()
        {
            Items = new List<Objs2>();
        }
    }
    public class Objs2
    {
        public string Id { get; set; }
        public string Name { get; set; }
    }
    public class Objs3
    {
        public string y { get; set; }
        public string label { get; set; }
    }

    public class Data
    {
        public string value { get; set; }
    }
    public class Result
    {
        public string pass { get; set; }
    }

    public class PartDetail
    {
        public string name { get; set; }
        public string code { get; set; }
        public string taxid { get; set; }
        public string catid { get; set; }
        public string modelids { get; set; }
        public string variantids { get; set; }
        public string hsn { get; set; }
        public string isgeneric { get; set; }

    }






    #endregion

    #region Hetul
    [WebMethod]
    public void GelAllModelAndVariantList(string spareID)
    {
        var objectToSerilize = new List<SpareNConsumable>();
        JavaScriptSerializer js = new JavaScriptSerializer() { MaxJsonLength = Int32.MaxValue };

        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            DataTable dt = new DataTable();
            String query = "(select Name, convert(varchar,id) as id,iif(1=1,'Model','')as type,id as order_ids from Vehicle_Model where Isdelete=0) union(select (Vehicle_Variant.Name+' [ '+Vehicle_Model.Name+' ]') as Name,convert(varchar,Vehicle_Variant.id)+'-1' as id,iif(1=1,'Vehicle','')as type,Vehicle_Model_id as order_ids from Vehicle_Variant inner join Vehicle_Model on Vehicle_Model_id=Vehicle_Model.id  where Vehicle_Variant.IsDelete=0 and Vehicle_Model.IsDelete=0)order by order_ids,type;";
            dt = dbCon.GetDataTable(query);
            int spare_ID = 0;
            int.TryParse(spareID, out spare_ID);
            DataTable dtbind = new DataTable();
            if (spare_ID > 0)
            {
                query = "(select convert(varchar,Vehicle_Model.id) as id from Vehicle_Model inner join SpareModelMapping on Vehicle_Model.Id=SpareModelMapping.VehicleModelId where Vehicle_Model.Isdelete=0 and SpareModelMapping.IsDelete=0 and SpareModelMapping.SpareId=" + spare_ID + ") union(select convert(varchar,Vehicle_Variant.id)+'-1' as id from Vehicle_Variant inner join SpareVariantMapping on Vehicle_Variant.id=SpareVariantMapping.VehicleVariantId  where Vehicle_Variant.IsDelete=0 and SpareVariantMapping.IsDelete=0 and SpareVariantMapping.SpareId=" + spare_ID + ");";
                dtbind = dbCon.GetDataTable(query);
            }
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    var model = new SpareNConsumable();
                    string id = dr["Id"].ToString();
                    model.Id = id;
                    model.Name = dr["Name"].ToString();
                    model.PurchasePrice = "0";
                    if (dtbind != null && dtbind.Rows.Count > 0)
                    {
                        DataRow[] drr = dtbind.Select("Id = '" + dr["Id"].ToString() + "' ");
                        if (drr.Length > 0)
                        {
                            model.PurchasePrice = "1";
                        }
                    }
                    //model.type = dr["type"].ToString();
                    objectToSerilize.Add(model);
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GetAllForPurchases Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }


    //Hetul  NEW 

    [WebMethod]
    public void GETJobcardDetails()
    {
        var objectToSerilize = new List<SpareNConsumable>();
        JavaScriptSerializer js = new JavaScriptSerializer() { MaxJsonLength = Int32.MaxValue };

        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            DataTable dt = new DataTable();
            String query = "select id,vehicle_id,customer_id,jobstatus_id from jobcard where JobStatus_Id <>3 ";
            dt = dbCon.GetDataTable(query);

            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    var model = new SpareNConsumable();
                    string id = dr["Id"].ToString();
                    model.Id = id;
                    //model.type = dr["type"].ToString();
                    objectToSerilize.Add(model);
                }
            }
        }
        catch (Exception e)
        {
            dbCon.InsertLogs(ErrorMsgPrefix + " GETJobcardDetails Msg:" + e.Message, "", e.StackTrace);
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }

    [WebMethod]
    //[ScriptMethod(UseHttpGet = true, ResponseFormat = ResponseFormat.Json)]
    //[System.Web.Services.Protocols.SoapHeader("SoapHeader")]
    public void GetPartsForPurchaseJobCard1(string jobcardid)
    {
        var objectToSerilize = new JobCardSpare1();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        try
        {
            string query = " SELECT Spare.Code, Spare.Name, Spare.Id, isnull( (Select  Sum(isnull(Requisition_Spare.Quantity,0))- Sum(- isnull(Requisition_Spare.ReceivedQuantity,0)) from  Requisition_Spare where Requisition_Spare.SpareId=Spare.Id),0) - isnull((SELECT SUM(Qty) AS Expr1 FROM            SpareSpareBrandMapping WHERE (SpareId = Spare.Id)),0) AS Quantity FROM Spare  where (isnull( (Select  Sum(isnull(Requisition_Spare.Quantity,0))- Sum(- isnull(Requisition_Spare.ReceivedQuantity,0)) from  Requisition_Spare where Requisition_Spare.SpareId=Spare.Id),0) - isnull((SELECT  SUM(Qty) AS Expr1 FROM SpareSpareBrandMapping WHERE (SpareId = Spare.Id)),0))>0 ";
            string[] param = { "0" };
            DataTable dt = dbCon.GetDataTableWithParams(query, param);
            if (dt != null && dt.Rows.Count > 0)
            {
                if (!jobcardid.Equals("0") && !jobcardid.Equals(""))
                {
                    jobcardid = jobcardid.TrimEnd(',');
                    query = " select JobCardId,SpareId,Quantity from JobCard_Spare_Mapping where JobCardId in(" + jobcardid + ")";
                    DataTable dttemp = dbCon.GetDataTable(query);
                    DataTable dtdata = dt.Clone();
                    if (dttemp != null && dttemp.Rows.Count > 0)
                    {
                        for (int i = 0; i < dttemp.Rows.Count; i++)
                        {
                            DataRow[] dr = dt.Select("id= " + dttemp.Rows[i]["SpareId"].ToString() + " ");
                            if (dr.Length > 0)
                            {
                                dtdata.Merge(dr.CopyToDataTable());
                            }
                        }
                    }
                    dt = dtdata.Copy();
                }
                foreach (DataRow dr in dt.Rows)
                {
                    var Spares = new SparewithPrice1();
                    //Spares.Brand = dr["brandname"].ToString();
                    Spares.Id = dr["Id"].ToString();
                    Spares.Name = dr["Code"].ToString();
                    //decimal Quantity = Convert.ToDecimal(dr["Quantity"]);
                    Spares.Quantity = dr["Quantity"].ToString();
                    //Spares.PurchasePrice = dr["PurchasePrice"].ToString();
                    Spares.NType = "spare";
                    objectToSerilize.Spares.Add(Spares);
                }
                objectToSerilize.resultflag = "1";
                objectToSerilize.Message = "Success";
            }
        }
        catch (Exception ex)
        {
            objectToSerilize.resultflag = "0";
            objectToSerilize.Message = "Error";
        }
        Context.Response.Write(js.Serialize(objectToSerilize));
    }


    [System.Web.Services.WebMethod]

    public void fillTabledatas(int JobCardId = 0, string Spare = "", string Service = "", bool fromDiscount = false)
    {
        var objectToSerilize = new Objs2();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";

        ServiceMethods ServiceMethod = new ServiceMethods();
        var Spares = ServiceMethod.GetJobCardSpareInJobCardForInvoiceV2_new(JobCardId.ToString(), Spare, Service);


        string query = "<table width='100%' border='0' style='border-collapse: collapse;font-size:7.5pt;border-bottom:1px solid #ccc;' cellpadding='0' cellspacing='0'><tbody><tr style='font-weight:bold;'><td width='5%' style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding: 5px;'>S.No</td><td width='20%' style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px' lang='english'>PARTICULARS OFServices</td><td width='10%' style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px'>HSN/SAC</td><td width='5%' style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px'>QTY</td><td width='5%' style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px' lang='english'>UNIT PRICE</td><td width='5%' style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px' lang='english'>Discount Per Unit</td><td width='5%' style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px' lang='english'>TAXABLE AMT</td><td width='27%' style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:0'><table border='0' width='100%' style='font-size:7.5pt;font-weight:bold;' cellpadding='0' cellspacing='0'><tbody><tr><td colspan='2' style='border-bottom:solid thin #ccc;text-align:center;    border-right: 1px solid #ccc;padding:5px'>CGST</td><td colspan='2' style='border-bottom:solid thin #ccc;text-align:center;padding:5px' lang='english'>SGST/UGST</td></tr><tr><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px' lang='english'>Rate (%)</td><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px' lang='english'>Amount</td><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px'>Rate (%)</td><td width='25%' style='text-align:center;padding:5px' lang='english'>Amount</td></tr></tbody></table></td><td width='10%' style='text-align:center;border-top:solid 1px #ccc;padding:5px' lang='english' colspan='4'>Amount</td></tr>";

        int count = 0;
        decimal withoutTaxPrice = 0;
        decimal TOTAlCGSTTax = 0;
        decimal TOTAlSGSTTax = 0;
        decimal TotalDiscount = 0;
        foreach (var temp in Spares.Spares)
        {
            string Temp = "";
            if (temp.Type == "Header")
            {
                if (temp.Name.ToLower().ToString() == "SubTotalForSpare".ToLower().ToString())
                {

                    Temp += "<tr><td width='90%' colspan='8' style='text-align:right;padding-right:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;' lang='english'>Total Before Tax (+)</td><td width='11%' colspan='3' style='text-align:right;padding:5px;border-top:solid 1px #ccc;'>   " + temp.TaxableAmount.ToString() + " </td></tr> <tr><td width='90%'  colspan='8' style='text-align:right;padding-right:5px;border-right:solid 1px #ccc;' lang='english'><b>Total Discount For Spare(-)</b></td><td width='11%' colspan='3' style='text-align:right;padding:5px;'><b>" + temp.TotalDiscountForSpare.ToString() + "</b></td></tr><tr><td width='90%' colspan='8' style='text-align:right;padding-right:5px;border-right:solid 1px #ccc;'>CGST (+)</td><td width='11%' colspan='3' style='text-align:right;padding:5px;'>" + temp.TotalCGSTAmount.ToString() + "</td></tr><tr><td width='90%' colspan='8' style='text-align:right;padding-right:5px;border-right:solid 1px #ccc;'>SGST/UGST (+)</td> <td width='11%' colspan='3' style='text-align:right;padding:5px;'>" + temp.TotalSGSTAmount.ToString() + "</td></tr><tr><td width='90%'  colspan='8' style='text-align:right;padding-right:5px; border-right:solid 1px #ccc; border-bottom:solid 1px #ccc; ' lang='english'>Sub Total For Spares</td><td width='11%'  colspan='3' style=text-align:right;padding:5px 10px; border-bottom:solid 1px #ccc; font-weight:bold'>" + temp.SubTotal.ToString() + "</td></tr>";
                    query += Temp;
                }
                else
                {
                    if (fromDiscount)
                    {
                        Temp += " <tr><td colspan='5' style='text-align:left;padding:5px 10px;border-top:solid 1px #ccc;font-weight:bold'>" + temp.Name + "</td><td><input id='" + (temp.Name.Contains("Spare") ? "Spare" : "Service") + "-All-Discount' onkeypress='return isNumberKey(event)' onchange='UpdateDiscount(" + (temp.Name.Contains("Spare") ? "1" : "2") + ")' type='text' style='width:80px;margin-left:5px;  border-top: 1px solid #ccc;' onkeypress='return isNumberKey(event)' value=''/></td><td colspan='3' style='text-align:left; padding:5px 10px; border-top:solid 1px #ccc; font-weight:bold'>(i.e. 1000 or i.e 5%)</td></tr>";
                    }
                    else
                    {
                        Temp += " <tr><td colspan='5' style='text-align:left;padding:5px 10px;border-top:solid 1px #ccc;font-weight:bold'>" + temp.Name + "</td><td style='border-top:  1px solid #ccc;'></td><td colspan='3' style='text-align:left; padding:5px 10px; border-top:solid 1px #ccc; font-weight:bold'></td></tr>";
                    }
                    query += Temp;
                }
            }
            else
            {

                decimal price = 0;
                try { price = Convert.ToDecimal(temp.UnitPrice); }
                catch (Exception ex)
                {
                }
                Decimal WithoutTaxPrice1 = 0;
                try
                {
                    WithoutTaxPrice1 = Convert.ToDecimal(temp.TaxableAmount);
                }
                catch (Exception ex)
                {
                }
                try
                {
                    TotalDiscount = Convert.ToDecimal(temp.TotalDiscount);
                }
                catch (Exception ex)
                { }
                //Temp += " <tr><td style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px'>" + (++count) + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'><span>" + temp.Name + "</span></td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + temp.HSNNumber + "</td> <td style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px'>" + temp.Quantity + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + price + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + (fromDiscount ? "<input type='text' style='width:80px;' onchange='UpdateDiscount(3)' class='cls-" + temp.ItemType + "' data-dis='" + temp.Discount + "' id='" + temp.ItemType + "-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "' value='" + temp.Discount + "'/>" : temp.Discount) + "</td><td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + temp.TaxableAmount + "</td><td style='text-align:left;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:0;'> <table border='0' width='100%' style='font-size:7.5pt' cellpadding='0' cellspacing='0'><tbody><tr><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px'>" + temp.CGSTRate + "</td><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px'>" + temp.CGSTAmount + "</td><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px;'>" + temp.SGSTRate + "</td><td width='25%' style='text-align:center;padding:5px'>" + temp.SGSTAmount + "</td></tr></tbody></table></td><td colspan='3' style='text-align:right;padding:5px; border-top:solid 1px #ccc;'>" + temp.FinalAmount + "</td></tr>";

                Temp += " <tr><td style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px'>" + (++count) + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'><span>" + temp.Name + "</span></td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + temp.HSNNumber + "</td> <td style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px'>" + temp.Quantity + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + price + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>"
          + (fromDiscount ? "<input type='text' style='width:80px;' onchange='UpdateDiscount(3)' class='cls-" + temp.ItemType + "' id='" + temp.ItemType + "-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "'  data-dis='" + temp.Discount + "' value='" + temp.Discount + "'/>" : temp.Discount) + "</td><td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + temp.TaxableAmount + "</td><td style='text-align:left;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:0;'> <table border='0' width='100%' style='font-size:7.5pt' cellpadding='0' cellspacing='0'><tbody><tr><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px'>" + temp.CGSTRate + "</td><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px'>" + "<Span  id='" + temp.ItemType + "-cgst-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "' >" + temp.CGSTAmount + "</span>" + "</td><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px;'>" + temp.SGSTRate + "</td><td width='25%' style='text-align:center;padding:5px'>" + "<Span  id='" + temp.ItemType + "-sgst-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "' >" + temp.SGSTAmount + "</span>" + "</td></tr></tbody></table></td><td colspan='3' style='text-align:right;padding:5px; border-top:solid 1px #ccc;'>" + "<Span  id='" + temp.ItemType + "-fa-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "' >" + temp.FinalAmount + "</span>" + "</td></tr>";

                if (temp.Type == "Header")
                {

                }
                query += Temp;
                withoutTaxPrice += WithoutTaxPrice1;


                //if (!String.IsNullOrEmpty(temp.CGSTAmount))
                //{
                //    try
                //    {
                //        TOTAlCGSTTax += Convert.ToDecimal(temp.CGSTAmount);
                //        TOTAlCGSTTax = Convert.ToDecimal(temp.TotalCGSTAmount);
                //        TOTAlCGSTTax = Math.Round(TOTAlCGSTTax, 0);


                //    }
                //    catch (Exception ex) { }
                //}
                //if (!String.IsNullOrEmpty(temp.SGSTAmount))
                //{
                //    try
                //    {
                //        TOTAlSGSTTax += Convert.ToDecimal(temp.SGSTAmount);

                //        TOTAlSGSTTax = Convert.ToDecimal(temp.TotalSGSTAmount);
                //        TOTAlSGSTTax = Math.Round(TOTAlSGSTTax, 0);

                //    }
                //    catch (Exception ex) { }
                //}
            }
        }
        foreach (var temp in Spares.Services)
        {
            string Temp = "";
            if (temp.Type == "Header")
            {
                if (temp.Name.ToLower().ToString() == "SubTotalForService".ToLower().ToString())
                {
                    //            //  " + ((Convert.ToDecimal(Spares[i].SubTotal)) - (Convert.ToDecimal(Spares[i].TotalSGSTAmount) * 2)).ToString() + "
                    Temp += "<tr><td width='90%' colspan='8' style='text-align:right;padding-right:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;' lang='english'>Total Before Tax (+)</td><td width='11%' colspan='3'  style='text-align:right;padding:5px;border-top:solid 1px #ccc;'>   " + temp.TaxableAmount.ToString() + " </td></tr> <tr><td width='90%'  colspan='8' style='text-align:right;padding-right:5px;border-right:solid 1px #ccc;' lang='english'><b>Total Discount For Service(-)</b></td><td width='11%' colspan='3' style='text-align:right;padding:5px; '><b>" + temp.TotalDiscountForService.ToString() + "</b></td></tr><tr><td width='90%' colspan='8' style='text-align:right;padding-right:5px;border-right:solid 1px #ccc;'>CGST (+)</td><td width='11%' colspan='3' style='text-align:right;padding:5px;'>" + temp.TotalCGSTAmount.ToString() + "</td></tr><tr><td width='90%' colspan='8' style='text-align:right;padding-right:5px;border-right:solid 1px #ccc;'>SGST/UGST (+)</td> <td width='11%' colspan='3' style='text-align:right;padding:5px;'>" + temp.TotalSGSTAmount.ToString() + "</td></tr><tr><td width='90%'  colspan='8' style='text-align:right;padding-right:5px;border-right:solid 1px #ccc;' lang='english'>Sub Total For Service</td><td width='11%' colspan='3' style='text-align:right;padding:5px; border-bottom:solid 1px #ccc;'>" + temp.SubTotal.ToString() + "</td></tr>";
                    query += Temp;
                }
                else
                {
                    if (fromDiscount)
                    {
                        Temp += " <tr><td colspan='5' style='text-align:left;padding:5px 10px;border-top:solid 1px #ccc;font-weight:bold'>" + temp.Name + "</td><td><input id='" + (temp.Name.Contains("Spare") ? "Spare" : "Service") + "-All-Discount' onkeypress='return isNumberKey(event)' onchange='UpdateDiscount(" + (temp.Name.Contains("Spare") ? "1" : "2") + ")' type='text' style='width:80px;margin-left:5px;' onkeypress='return isNumberKey(event)' value=''/></td><td colspan='3'>(i.e. 1000 or i.e 5%)</td></tr>";
                    }
                    else
                    {
                        Temp += " <tr><td colspan='5' style='text-align:left;padding:5px 10px;border-top:solid 1px #ccc;font-weight:bold'>" + temp.Name + "</td><td style='border-top:  1px solid #ccc;'></td><td colspan='3'></td></tr>";
                    }
                    query += Temp;
                }
            }
            else
            {

                decimal price = 0;
                try { price = Convert.ToDecimal(temp.UnitPrice); }
                catch (Exception ex)
                {
                }
                Decimal WithoutTaxPrice1 = 0;
                try
                {
                    WithoutTaxPrice1 = Convert.ToDecimal(temp.TaxableAmount);
                }
                catch (Exception ex)
                {
                }
                try
                {
                    TotalDiscount = Convert.ToDecimal(temp.TotalDiscount);
                }
                catch (Exception ex)
                { }


                Temp += " <tr><td style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px'>" + (++count) + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'><span>" + temp.Name + "</span></td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + temp.HSNNumber + "</td> <td style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px'>" + temp.Quantity + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + price + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>"
                    + (fromDiscount ? "<input type='text' style='width:80px;' onchange='UpdateDiscount(3)' class='cls-" + temp.ItemType + "' id='" + temp.ItemType + "-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "'  data-dis='" + temp.Discount + "' value='" + temp.Discount + "'/>" : temp.Discount) + "</td><td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + temp.TaxableAmount + "</td><td style='text-align:left;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:0;'> <table border='0' width='100%' style='font-size:7.5pt' cellpadding='0' cellspacing='0'><tbody><tr><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px'>" + temp.CGSTRate + "</td><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px'>" + "<Span  id='" + temp.ItemType + "-cgst-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "' >" + temp.CGSTAmount + "</span>" + "</td><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px;'>" + temp.SGSTRate + "</td><td width='25%' style='text-align:center;padding:5px'>" + "<Span  id='" + temp.ItemType + "-sgst-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "' >" + temp.SGSTAmount + "</span>" + "</td></tr></tbody></table></td><td colspan='3' style='text-align:right;padding:5px; border-top:solid 1px #ccc;'>" + "<Span  id='" + temp.ItemType + "-fa-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "' >" + temp.FinalAmount + "</span>" + "</td></tr>";

                if (temp.Type == "Header")
                {

                }
                query += Temp;
                withoutTaxPrice += WithoutTaxPrice1;
                //if (!String.IsNullOrEmpty(temp.CGSTAmount))
                //{
                //    try
                //    {
                //        TOTAlCGSTTax += Convert.ToDecimal(temp.CGSTAmount);
                //        TOTAlCGSTTax = Convert.ToDecimal(temp.TotalCGSTAmount);
                //        TOTAlCGSTTax = Math.Round(TOTAlCGSTTax, 0);
                //    }
                //    catch (Exception ex) { }
                //}
                //if (!String.IsNullOrEmpty(temp.SGSTAmount))
                //{
                //    try
                //    {
                //        TOTAlSGSTTax += Convert.ToDecimal(temp.SGSTAmount);
                //        TOTAlSGSTTax = Convert.ToDecimal(temp.TotalSGSTAmount);
                //        TOTAlSGSTTax = Math.Round(TOTAlSGSTTax, 0);
                //    }
                //    catch (Exception ex) { }
                //}
            }
            //changes 
        }
        Decimal SubTotal = Convert.ToDecimal(Spares.TotalAmount);
        SubTotal = Math.Round(SubTotal, 2);
        Decimal FinalTotal = SubTotal - TotalDiscount;
        FinalTotal = Math.Round(FinalTotal, 2);
        query += "<tr style='font-weight:bold;'><td colspan='8' style='text-align:right;padding-right:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>Total Amount</td><td colspan='3' style='text-align:right;padding:5px;border-top:solid 1px #ccc;'>" + Spares.TotalAmount + "</td></tr><tr style='font-weight:bold;'><td colspan='8' style='text-align:right;padding-right:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>Total Discount</td><td colspan='3' style='text-align:right;padding:5px;border-top:solid 1px #ccc;'> " + Spares.TotalDiscount + "</td></tr><tr style='font-weight:bold;'><td colspan='8' style='text-align:right;padding-right:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>Final Amount</td><td colspan='3' style='text-align:right;padding:5px; border-top:solid 1px #ccc;'> " + Spares.FinalAmount + "</td></tr></tbody></table>";
        int finaltotal = Convert.ToInt32(FinalTotal);
        try
        {
            int jobcardinvoiceAmount = ServiceMethod.updateAmountJobCardInvoiceDetail(JobCardId, finaltotal);
        }
        catch (Exception ex)
        {
        }
        string customernotes = ServiceMethod.CustomerNotesForInvoice(JobCardId.ToString(), "2");
        if (customernotes.Contains(","))
        {
            customernotes = customernotes.Replace(",", ", ");
        }
        string substring = ServiceMethod.NumbersToWords(finaltotal);
        objectToSerilize.Name = query + "<input type='hidden' id='rpnword' value='" + substring + "'>" + "<input type='hidden' id='customernotes' value='" + customernotes + "'>";
        Context.Response.Write(js.Serialize(objectToSerilize));
    }
    [WebMethod]
    public void fillTabledatas_Invoice(int JobCardId = 0, string Spare = "", string Service = "", bool fromDiscount = false)
    {
        var objectToSerilize = new Objs2();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";

        ServiceMethods ServiceMethod = new ServiceMethods();
        var Spares = ServiceMethod.GetJobCardSpareInJobCardForInvoiceV3(JobCardId.ToString());


        string query = "<table width='100%' border='0' style='border-collapse: collapse;font-size:7.5pt;border-bottom:1px solid #ccc;' cellpadding='0' cellspacing='0'><tbody><tr style='font-weight:bold;'><td width='5%' style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding: 5px;'>S.No</td><td width='20%' style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px' lang='english'>PARTICULARS OFServices</td><td width='10%' style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px'>HSN/SAC</td><td width='5%' style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px'>QTY</td><td width='5%' style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px' lang='english'>UNIT PRICE</td><td width='5%' style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px' lang='english'>Discount Per Unit</td><td width='5%' style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px' lang='english'>TAXABLE AMT</td><td width='27%' style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:0'><table border='0' width='100%' style='font-size:7.5pt;font-weight:bold;' cellpadding='0' cellspacing='0'><tbody><tr><td colspan='2' style='border-bottom:solid thin #ccc;text-align:center;    border-right: 1px solid #ccc;padding:5px'>CGST</td><td colspan='2' style='border-bottom:solid thin #ccc;text-align:center;padding:5px' lang='english'>SGST/UGST</td></tr><tr><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px' lang='english'>Rate (%)</td><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px' lang='english'>Amount</td><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px'>Rate (%)</td><td width='25%' style='text-align:center;padding:5px' lang='english'>Amount</td></tr></tbody></table></td><td width='10%' style='text-align:center;border-top:solid 1px #ccc;padding:5px' lang='english' colspan='4'>Amount</td></tr>";

        int count = 0;
        decimal withoutTaxPrice = 0;
        decimal TOTAlCGSTTax = 0;
        decimal TOTAlSGSTTax = 0;
        decimal TotalDiscount = 0;
        foreach (var temp in Spares.Spares)
        {
            string Temp = "";
            if (temp.Type == "Header")
            {
                if (temp.Name.ToLower().ToString() == "SubTotalForSpare".ToLower().ToString())
                {

                    Temp += "<tr><td width='90%' colspan='8' style='text-align:right;padding-right:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;' lang='english'>Total Before Tax (+)</td><td width='11%' colspan='3' style='text-align:right;padding:5px;border-top:solid 1px #ccc;'>   " + temp.TaxableAmount.ToString() + " </td></tr> <tr><td width='90%'  colspan='8' style='text-align:right;padding-right:5px;border-right:solid 1px #ccc;' lang='english'><b>Total Discount For Spare(-)</b></td><td width='11%' colspan='3' style='text-align:right;padding:5px;'><b>" + temp.TotalDiscountForSpare.ToString() + "</b></td></tr><tr><td width='90%' colspan='8' style='text-align:right;padding-right:5px;border-right:solid 1px #ccc;'>CGST (+)</td><td width='11%' colspan='3' style='text-align:right;padding:5px;'>" + temp.TotalCGSTAmount.ToString() + "</td></tr><tr><td width='90%' colspan='8' style='text-align:right;padding-right:5px;border-right:solid 1px #ccc;'>SGST/UGST (+)</td> <td width='11%' colspan='3' style='text-align:right;padding:5px;'>" + temp.TotalSGSTAmount.ToString() + "</td></tr><tr><td width='90%'  colspan='8' style='text-align:right;padding-right:5px; border-right:solid 1px #ccc; border-bottom:solid 1px #ccc; ' lang='english'>Sub Total For Spares</td><td width='11%'  colspan='3' style=text-align:right;padding:5px 10px; border-bottom:solid 1px #ccc; font-weight:bold'>" + temp.SubTotal.ToString() + "</td></tr>";
                    query += Temp;
                }
                else
                {
                    if (fromDiscount)
                    {
                        Temp += " <tr><td colspan='5' style='text-align:left;padding:5px 10px;border-top:solid 1px #ccc;font-weight:bold'>" + temp.Name + "</td><td><input id='" + (temp.Name.Contains("Spare") ? "Spare" : "Service") + "-All-Discount' onkeypress='return isNumberKey(event)' onchange='UpdateDiscount(" + (temp.Name.Contains("Spare") ? "1" : "2") + ")' type='text' style='width:80px;margin-left:5px;  border-top: 1px solid #ccc;' onkeypress='return isNumberKey(event)' value=''/></td><td colspan='3' style='text-align:left; padding:5px 10px; border-top:solid 1px #ccc; font-weight:bold'>(i.e. 1000 or i.e 5%)</td></tr>";
                    }
                    else
                    {
                        Temp += " <tr><td colspan='5' style='text-align:left;padding:5px 10px;border-top:solid 1px #ccc;font-weight:bold'>" + temp.Name + "</td><td></td><td colspan='3' style='text-align:left; padding:5px 10px; border-top:solid 1px #ccc; font-weight:bold'></td></tr>";
                    }
                    query += Temp;
                }
            }
            else
            {

                decimal price = 0;
                try { price = Convert.ToDecimal(temp.UnitPrice); }
                catch (Exception ex)
                {
                }
                Decimal WithoutTaxPrice1 = 0;
                try
                {
                    WithoutTaxPrice1 = Convert.ToDecimal(temp.TaxableAmount);
                }
                catch (Exception ex)
                {
                }
                try
                {
                    TotalDiscount = Convert.ToDecimal(temp.TotalDiscount);
                }
                catch (Exception ex)
                { }
                //Temp += " <tr><td style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px'>" + (++count) + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'><span>" + temp.Name + "</span></td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + temp.HSNNumber + "</td> <td style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px'>" + temp.Quantity + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + price + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + (fromDiscount ? "<input type='text' style='width:80px;' onchange='UpdateDiscount(3)' class='cls-" + temp.ItemType + "' data-dis='" + temp.Discount + "' id='" + temp.ItemType + "-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "' value='" + temp.Discount + "'/>" : temp.Discount) + "</td><td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + temp.TaxableAmount + "</td><td style='text-align:left;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:0;'> <table border='0' width='100%' style='font-size:7.5pt' cellpadding='0' cellspacing='0'><tbody><tr><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px'>" + temp.CGSTRate + "</td><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px'>" + temp.CGSTAmount + "</td><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px;'>" + temp.SGSTRate + "</td><td width='25%' style='text-align:center;padding:5px'>" + temp.SGSTAmount + "</td></tr></tbody></table></td><td colspan='3' style='text-align:right;padding:5px; border-top:solid 1px #ccc;'>" + temp.FinalAmount + "</td></tr>";

                Temp += " <tr><td style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px'>" + (++count) + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'><span>" + temp.Name + "</span></td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + temp.HSNNumber + "</td> <td style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px'>" + temp.Quantity + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + price + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>"
          + (fromDiscount ? "<input type='text' style='width:80px;' onchange='UpdateDiscount(3)' class='cls-" + temp.ItemType + "' id='" + temp.ItemType + "-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "'  data-dis='" + temp.Discount + "' value='" + temp.Discount + "'/>" : temp.Discount) + "</td><td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + temp.TaxableAmount + "</td><td style='text-align:left;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:0;'> <table border='0' width='100%' style='font-size:7.5pt' cellpadding='0' cellspacing='0'><tbody><tr><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px'>" + temp.CGSTRate + "</td><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px'>" + "<Span  id='" + temp.ItemType + "-cgst-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "' >" + temp.CGSTAmount + "</span>" + "</td><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px;'>" + temp.SGSTRate + "</td><td width='25%' style='text-align:center;padding:5px'>" + "<Span  id='" + temp.ItemType + "-sgst-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "' >" + temp.SGSTAmount + "</span>" + "</td></tr></tbody></table></td><td colspan='3' style='text-align:right;padding:5px; border-top:solid 1px #ccc;'>" + "<Span  id='" + temp.ItemType + "-fa-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "' >" + temp.FinalAmount + "</span>" + "</td></tr>";

                if (temp.Type == "Header")
                {

                }
                query += Temp;
                withoutTaxPrice += WithoutTaxPrice1;


                //if (!String.IsNullOrEmpty(temp.CGSTAmount))
                //{
                //    try
                //    {
                //        TOTAlCGSTTax += Convert.ToDecimal(temp.CGSTAmount);
                //        TOTAlCGSTTax = Convert.ToDecimal(temp.TotalCGSTAmount);
                //        TOTAlCGSTTax = Math.Round(TOTAlCGSTTax, 0);


                //    }
                //    catch (Exception ex) { }
                //}
                //if (!String.IsNullOrEmpty(temp.SGSTAmount))
                //{
                //    try
                //    {
                //        TOTAlSGSTTax += Convert.ToDecimal(temp.SGSTAmount);

                //        TOTAlSGSTTax = Convert.ToDecimal(temp.TotalSGSTAmount);
                //        TOTAlSGSTTax = Math.Round(TOTAlSGSTTax, 0);

                //    }
                //    catch (Exception ex) { }
                //}
            }
        }
        foreach (var temp in Spares.Services)
        {
            string Temp = "";
            if (temp.Type == "Header")
            {
                if (temp.Name.ToLower().ToString() == "SubTotalForService".ToLower().ToString())
                {
                    //            //  " + ((Convert.ToDecimal(Spares[i].SubTotal)) - (Convert.ToDecimal(Spares[i].TotalSGSTAmount) * 2)).ToString() + "
                    Temp += "<tr><td width='90%' colspan='8' style='text-align:right;padding-right:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;' lang='english'>Total Before Tax (+)</td><td width='11%' colspan='3'  style='text-align:right;padding:5px;border-top:solid 1px #ccc;'>   " + temp.TaxableAmount.ToString() + " </td></tr> <tr><td width='90%'  colspan='8' style='text-align:right;padding-right:5px;border-right:solid 1px #ccc;' lang='english'><b>Total Discount For Service(-)</b></td><td width='11%' colspan='3' style='text-align:right;padding:5px; '><b>" + temp.TotalDiscountForService.ToString() + "</b></td></tr><tr><td width='90%' colspan='8' style='text-align:right;padding-right:5px;border-right:solid 1px #ccc;'>CGST (+)</td><td width='11%' colspan='3' style='text-align:right;padding:5px;'>" + temp.TotalCGSTAmount.ToString() + "</td></tr><tr><td width='90%' colspan='8' style='text-align:right;padding-right:5px;border-right:solid 1px #ccc;'>SGST/UGST (+)</td> <td width='11%' colspan='3' style='text-align:right;padding:5px;'>" + temp.TotalSGSTAmount.ToString() + "</td></tr><tr><td width='90%'  colspan='8' style='text-align:right;padding-right:5px;border-right:solid 1px #ccc;' lang='english'>Sub Total For Service</td><td width='11%' colspan='3' style='text-align:right;padding:5px; border-bottom:solid 1px #ccc;'>" + temp.SubTotal.ToString() + "</td></tr>";
                    query += Temp;
                }
                else
                {
                    if (fromDiscount)
                    {
                        Temp += " <tr><td colspan='5' style='text-align:left;padding:5px 10px;border-top:solid 1px #ccc;font-weight:bold'>" + temp.Name + "</td><td><input id='" + (temp.Name.Contains("Spare") ? "Spare" : "Service") + "-All-Discount' onkeypress='return isNumberKey(event)' onchange='UpdateDiscount(" + (temp.Name.Contains("Spare") ? "1" : "2") + ")' type='text' style='width:80px;margin-left:5px;' onkeypress='return isNumberKey(event)' value=''/></td><td colspan='3'>(i.e. 1000 or i.e 5%)</td></tr>";
                    }
                    else
                    {
                        Temp += " <tr><td colspan='5' style='text-align:left;padding:5px 10px;border-top:solid 1px #ccc;font-weight:bold'>" + temp.Name + "</td><td></td><td colspan='3'></td></tr>";
                    }
                    query += Temp;
                }
            }
            else
            {

                decimal price = 0;
                try { price = Convert.ToDecimal(temp.UnitPrice); }
                catch (Exception ex)
                {
                }
                Decimal WithoutTaxPrice1 = 0;
                try
                {
                    WithoutTaxPrice1 = Convert.ToDecimal(temp.TaxableAmount);
                }
                catch (Exception ex)
                {
                }
                try
                {
                    TotalDiscount = Convert.ToDecimal(temp.TotalDiscount);
                }
                catch (Exception ex)
                { }


                Temp += " <tr><td style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px'>" + (++count) + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'><span>" + temp.Name + "</span></td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + temp.HSNNumber + "</td> <td style='text-align:center;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:5px'>" + temp.Quantity + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + price + "</td> <td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>"
                    + (fromDiscount ? "<input type='text' style='width:80px;' onchange='UpdateDiscount(3)' class='cls-" + temp.ItemType + "' id='" + temp.ItemType + "-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "'  data-dis='" + temp.Discount + "' value='" + temp.Discount + "'/>" : temp.Discount) + "</td><td style='text-align:center;padding:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>" + temp.TaxableAmount + "</td><td style='text-align:left;border-top:solid 1px #ccc;border-right:solid 1px #ccc;padding:0;'> <table border='0' width='100%' style='font-size:7.5pt' cellpadding='0' cellspacing='0'><tbody><tr><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px'>" + temp.CGSTRate + "</td><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px'>" + "<Span  id='" + temp.ItemType + "-cgst-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "' >" + temp.CGSTAmount + "</span>" + "</td><td width='25%' style='border-right:1px solid #ddd;text-align:center;padding:5px;'>" + temp.SGSTRate + "</td><td width='25%' style='text-align:center;padding:5px'>" + "<Span  id='" + temp.ItemType + "-sgst-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "' >" + temp.SGSTAmount + "</span>" + "</td></tr></tbody></table></td><td colspan='3' style='text-align:right;padding:5px; border-top:solid 1px #ccc;'>" + "<Span  id='" + temp.ItemType + "-fa-" + (temp.ItemType == "Spare" ? temp.InvoiceSpareId : temp.InvoiceServiceId) + "' >" + temp.FinalAmount + "</span>" + "</td></tr>";

                if (temp.Type == "Header")
                {

                }
                query += Temp;
                withoutTaxPrice += WithoutTaxPrice1;
                //if (!String.IsNullOrEmpty(temp.CGSTAmount))
                //{
                //    try
                //    {
                //        TOTAlCGSTTax += Convert.ToDecimal(temp.CGSTAmount);
                //        TOTAlCGSTTax = Convert.ToDecimal(temp.TotalCGSTAmount);
                //        TOTAlCGSTTax = Math.Round(TOTAlCGSTTax, 0);
                //    }
                //    catch (Exception ex) { }
                //}
                //if (!String.IsNullOrEmpty(temp.SGSTAmount))
                //{
                //    try
                //    {
                //        TOTAlSGSTTax += Convert.ToDecimal(temp.SGSTAmount);
                //        TOTAlSGSTTax = Convert.ToDecimal(temp.TotalSGSTAmount);
                //        TOTAlSGSTTax = Math.Round(TOTAlSGSTTax, 0);
                //    }
                //    catch (Exception ex) { }
                //}
            }
            //changes 
        }
        Decimal SubTotal = Convert.ToDecimal(Spares.TotalAmount);
        SubTotal = Math.Round(SubTotal, 2);
        Decimal FinalTotal = SubTotal - TotalDiscount;
        FinalTotal = Math.Round(FinalTotal, 2);
        query += "<tr style='font-weight:bold;'><td colspan='8' style='text-align:right;padding-right:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>Total Amount</td><td colspan='3' style='text-align:right;padding:5px;border-top:solid 1px #ccc;'>" + Spares.TotalAmount + "</td></tr><tr style='font-weight:bold;'><td colspan='8' style='text-align:right;padding-right:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>Total Discount</td><td colspan='3' style='text-align:right;padding:5px;border-top:solid 1px #ccc;'> " + Spares.TotalDiscount + "</td></tr><tr style='font-weight:bold;'><td colspan='8' style='text-align:right;padding-right:5px;border-top:solid 1px #ccc;border-right:solid 1px #ccc;'>Final Amount</td><td colspan='3' style='text-align:right;padding:5px; border-top:solid 1px #ccc;'> " + Spares.FinalAmount + "</td></tr></tbody></table>";
        int finaltotal = Convert.ToInt32(FinalTotal);
        try
        {
            int jobcardinvoiceAmount = ServiceMethod.updateAmountJobCardInvoiceDetail(JobCardId, finaltotal);
        }
        catch (Exception ex)
        {
        }
        string customernotes = ServiceMethod.CustomerNotesForInvoice(JobCardId.ToString(), "2");
        if (customernotes.Contains(","))
        {
            customernotes = customernotes.Replace(",", ", ");
        }
        string substring = ServiceMethod.NumbersToWords(finaltotal);
        objectToSerilize.Name = query + "<input type='hidden' id='rpnword' value='" + substring + "'>" + "<input type='hidden' id='customernotes' value='" + customernotes + "'>";
        Context.Response.Write(js.Serialize(objectToSerilize));
    }

    [WebMethod]
    //[ScriptMethod(UseHttpGet = true, ResponseFormat = ResponseFormat.Json)]
    //[System.Web.Services.Protocols.SoapHeader("SoapHeader")]
    public void GenerateHtml(String htmlData, string filename, string HtmlContent, string jobCardId, string Type = "")

    //public void GenerateHtml(string data, string jobCardId)
    {

        htmlData = HttpUtility.UrlDecode(htmlData);
        var objectToSerilize = new ServiceClass.GeneratePDF();
        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Clear();
        Context.Response.ContentType = "application/json";
        if (!String.IsNullOrWhiteSpace(jobCardId))
        {
            string status = "";
            string FinalDownLoadViewPath = HostingEnvironment.ApplicationPhysicalPath;
            string foldername = "BarcodeImages";
            string invoicefolder = "Invoicepdfs";
            string barcodeimg_path = HostingEnvironment.ApplicationPhysicalPath + foldername;
            string invoicepdf_path = HostingEnvironment.ApplicationPhysicalPath + invoicefolder;
            string invoicepdf_path_with_filename = invoicepdf_path + "\\" + jobCardId.ToString() + ".pdf";
            try
            {
                int jobcard = 0;
                try { jobcard = Convert.ToInt32(jobCardId); }
                catch (Exception ex)
                {
                }
                //string filename1 = ServiceMethod.GetJobCardInvoiceDetail(jobcard);
                //if (File.Exists(invoicepdf_path + "\\" + filename1))
                //{
                //    objectToSerilize.resultflag = "1";
                //    objectToSerilize.Message = Constant.Message.SuccessMessage;
                //    objectToSerilize.InvoiceUrl = Constant.Message.PDFPATHFORJOBCARD + "\\" + filename1;
                //}
                //else
                //{

                #region Html Generation
                string folderPath = invoicepdf_path;
                if (!Directory.Exists(folderPath))
                {
                    Directory.CreateDirectory(folderPath);
                }

                //File Name 
                int fileCount = Directory.GetFiles(invoicepdf_path).Length;
                string strFileName = "JobCardId_" + jobCardId + "_" + (fileCount + 1) + ".html";
                //PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(Path.Combine(invoicepdf_path, strFileName), FileMode.Create));
                if (Type == "1")
                {
                    //strFileName = "Invoice_JobCardId_" + jobCardId + "_" + (fileCount + 1) + ".html";
                    strFileName = "Profoma_JobCardId_" + jobCardId + "_" + (fileCount + 1) + ".html";
                }
                if (Type == "2")
                {
                    strFileName = "Profoma_JobCardId_" + jobCardId + "_" + (fileCount + 1) + ".html";
                }
                if (Type == "3")
                {
                    strFileName = "JobCardId_" + jobCardId + "_" + (fileCount + 1) + ".html";
                }
                if (Type == "4")
                {
                    strFileName = "Estimate_" + jobCardId + "_" + (fileCount + 1) + ".html";
                }

                if (jobcard > 0)
                {
                    //string urlAddress = "http://web.motorz.co.in/Accounts/PrintJobCard_Detail.aspx?JobCardId=" + jobcard;
                    //if (Type == "1")
                    //{
                    //    urlAddress = "http://web.motorz.co.in/Accounts/PerformaInvoice.aspx?JobCardId=" + jobcard;
                    //}
                    //if (Type == "2")
                    //{
                    //    urlAddress = "http://web.motorz.co.in/Accounts/PerformaInvoice.aspx?JobCardId=" + jobcard;
                    //}
                    //if (Type == "3")
                    //{
                    //    urlAddress = "http://web.motorz.co.in/Accounts/PrintJobCard_Detail.aspx?JobCardId=" + jobcard;
                    //}
                    //if (Type == "4")
                    //{
                    //    urlAddress = "http://web.motorz.co.in/Accounts/Estimate_Detail.aspx?JobCardId=" + jobcard;
                    //}

                    //  WebBrowser Browser = new WebBrowser();
                    ////  Browser.Url = urlAddress;
                    //  Browser.Navigate(urlAddress);



                    //string html = Browser.DocumentText;
                    //HttpWebRequest request = (HttpWebRequest)WebRequest.Create(urlAddress);

                    //HttpWebResponse response = (HttpWebResponse)request.GetResponse();

                    //if (response.StatusCode == HttpStatusCode.OK)
                    //{
                    //    Stream receiveStream = response.GetResponseStream();
                    //    StreamReader readStream = null;

                    //    if (response.CharacterSet == null)
                    //    {
                    //        readStream = new StreamReader(receiveStream);
                    //    }
                    //    else
                    //    {
                    //        readStream = new StreamReader(receiveStream, Encoding.GetEncoding(response.CharacterSet));
                    //    }

                    //string data = htmlData.ToString();

                    if (!String.IsNullOrEmpty(htmlData))
                    {
                        FileStream file = new FileStream(Path.Combine(invoicepdf_path, strFileName), FileMode.Create);
                        using (StreamWriter w = new StreamWriter(file, Encoding.UTF8))
                        {
                            w.WriteLine(htmlData);
                        }
                    }

                    //    response.Close();
                    //    readStream.Close();
                    //    }
                    //
                }
                //doc.Close();

                if (jobcard > 0)
                {
                    int InvoiceNumber = 1;

                    int result = ServiceMethod.InsertJobCardInvoiceDetail(jobcard, InvoiceNumber, strFileName, Type);
                    int result1 = 0;//ServiceMethod.InsertInvoice(jobcard);
                    //if (Type == "4")
                    //{
                    //  //  result1 = ServiceMethod.insertEstimate(jobcard);
                    //}
                }

                objectToSerilize.resultflag = "1";
                objectToSerilize.Message = Constant.Message.SuccessMessage;
                // objectToSerilize.InvoiceUrl = Constant.Message.PDFPATHFORJOBCARD + "//" + strFileName;

                #endregion
                //}
            }
            catch (Exception ex)
            {
                objectToSerilize.resultflag = "0";
                objectToSerilize.Message = Constant.Message.ErrorMessage;
                objectToSerilize.InvoiceUrl = "";
            }
        }
        else
        {
            objectToSerilize.resultflag = "0";
            objectToSerilize.Message = Constant.Message.ErrorMessage;
            objectToSerilize.InvoiceUrl = "";
        }
        Context.Response.Write(js.Serialize(objectToSerilize));

    }


    //[WebMethod]
    //public void GetSpareMrp(string sid)
    //{
    //    var obj = new Objs();
    //    JavaScriptSerializer js = new JavaScriptSerializer() { MaxJsonLength = Int32.MaxValue };
    //    Context.Response.Clear();
    //    Context.Response.ContentType = "application/json";
    //    try
    //    {
    //        DataTable dt = dbCon.GetDataTable("select ");
    //        if (dt != null && dt.Rows.Count > 0)
    //        {
    //            obj.Name = dt.Rows[0]["Name"].ToString();
    //        }
    //    }
    //    catch (Exception e)
    //    {
    //        dbCon.InsertLogs(ErrorMsgPrefix + " GetModelByBrandId Msg:" + e.Message, "", e.StackTrace);
    //    }
    //    Context.Response.Write(js.Serialize(obj));
    //}
    #endregion

}
